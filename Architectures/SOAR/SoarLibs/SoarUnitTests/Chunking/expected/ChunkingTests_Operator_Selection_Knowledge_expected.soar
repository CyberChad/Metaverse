sp {answerx2*apply*op*OpNoChange*t2-41-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c4>
          ^prohibit-test <c4> ^acceptable-test <c4> ^numbers <c3>
          ^worst-test <c3> ^acceptable-test <c3> ^numbers <c2>
          ^worst-test <c2> ^acceptable-test <c2> ^numbers { <= <c9> <c1> }
          ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c9> ^operators <c8> ^operators <c7> ^operators <c6>
          ^name <c5> ^prohibits { <= <c6> <c4> } ^worsts { <= <c7> <c3> }
          ^worsts { <= <c8> <c2> })
    -->
    (<s1> ^result op5 +)
}

sp {answer*apply*op*OpNoChange*t2-41-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c1> ^prohibit-test <c1>
          ^acceptable-test <c1> ^numbers <c3> ^worst-test <c3>
          ^acceptable-test <c3> ^numbers <c5> ^worst-test <c5>
          ^acceptable-test <c5> ^numbers { <= <c9> <c8> }
          ^acceptable-test <c8>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c9> ^operators <c6> ^operators <c4> ^operators <c2>
          ^name <c7> ^prohibits { <= <c2> <c1> } ^worsts { <= <c4> <c3> }
          ^worsts { <= <c6> <c5> })
    -->
    (<s1> ^result op5 +)
}

sp {answerx2*apply*op*OpNoChange*t2-11-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c1>
          ^nindifferent-test <c1> ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c4> ^name <c3> ^numerics <b1>)
    (<b1> ^referent <c2> ^value { <= <c4> <c1> })
    -->
    (<s1> ^result op3 +)
}

sp {answer*apply*op*OpNoChange*t2-11-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c2> ^nindifferent-test <c2>
          ^acceptable-test <c2>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c3> ^name <c1> ^numerics <b1>)
    (<b1> ^referent <c4> ^value { <= <c3> <c2> })
    -->
    (<s1> ^result op3 +)
}

sp {answerx2*apply*op*OpNoChange*t47-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c2> ^numbers <c8>
          ^nindifferent-test <c2> ^bindifferent-test <c8>
          ^bindifferent-test <c2> ^acceptable-test <c2> ^acceptable-test <c8>
          ^numbers <c7> ^bindifferent-test <c7> ^acceptable-test <c7>
          ^numbers <c6> ^bindifferent-test <c6> ^acceptable-test <c6>
          ^numbers <c5> ^acceptable-test <c5> ^numbers <c4>
          ^acceptable-test <c4> ^numbers <c3> ^acceptable-test <c3>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c16> ^operators <c15> ^operators <c14> ^operators <c13>
          ^operators <c12> ^operators <c11> ^operators <c10> ^name <c9>
          ^binary-indifferents <b7> ^binary-indifferents <b6>
          ^binary-indifferents <b5> ^binary-indifferents <b4>
          ^binary-indifferents <b3> ^binary-indifferents <b2> ^numerics <b1>)
    (<b7> ^referent { <= <c16> <c2> } ^value { <= <c10> <c8> })
    (<b6> ^referent <c2> ^value { <= <c11> <c7> })
    (<b5> ^referent <c2> ^value { <= <c12> <c6> })
    (<b4> ^value <c2> ^referent { <= <c13> <c5> })
    (<b3> ^value <c2> ^referent { <= <c14> <c4> })
    (<b2> ^value <c2> ^referent { <= <c15> <c3> })
    (<b1> ^value <c2> ^referent <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t47-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c14> ^numbers <c1>
          ^nindifferent-test <c14> ^bindifferent-test <c1>
          ^bindifferent-test <c14> ^acceptable-test <c14>
          ^acceptable-test <c1> ^numbers <c3> ^bindifferent-test <c3>
          ^acceptable-test <c3> ^numbers <c5> ^bindifferent-test <c5>
          ^acceptable-test <c5> ^numbers <c7> ^acceptable-test <c7>
          ^numbers <c9> ^acceptable-test <c9> ^numbers <c11>
          ^acceptable-test <c11>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c15> ^operators <c12> ^operators <c10> ^operators <c8>
          ^operators <c6> ^operators <c4> ^operators <c2> ^name <c13>
          ^binary-indifferents <b6> ^binary-indifferents <b5>
          ^binary-indifferents <b4> ^binary-indifferents <b3>
          ^binary-indifferents <b2> ^binary-indifferents <b1> ^numerics <b7>)
    (<b6> ^referent { <= <c15> <c14> } ^value { <= <c2> <c1> })
    (<b5> ^referent <c14> ^value { <= <c4> <c3> })
    (<b4> ^referent <c14> ^value { <= <c6> <c5> })
    (<b3> ^value <c14> ^referent { <= <c8> <c7> })
    (<b2> ^value <c14> ^referent { <= <c10> <c9> })
    (<b1> ^value <c14> ^referent { <= <c12> <c11> })
    (<b7> ^value <c14> ^referent <c16>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t41-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c4>
          ^prohibit-test <c4> ^acceptable-test <c4> ^numbers <c3>
          ^worst-test <c3> ^acceptable-test <c3> ^numbers <c2>
          ^worst-test <c2> ^acceptable-test <c2> ^numbers { <= <c9> <c1> }
          ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c9> ^operators <c8> ^operators <c7> ^operators <c6>
          ^name <c5> ^prohibits { <= <c6> <c4> } ^worsts { <= <c7> <c3> }
          ^worsts { <= <c8> <c2> })
    -->
    (<s1> ^result op4 +)
}

sp {answer*apply*op*OpNoChange*t41-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c1> ^prohibit-test <c1>
          ^acceptable-test <c1> ^numbers <c3> ^worst-test <c3>
          ^acceptable-test <c3> ^numbers <c5> ^worst-test <c5>
          ^acceptable-test <c5> ^numbers { <= <c9> <c8> }
          ^acceptable-test <c8>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c9> ^operators <c6> ^operators <c4> ^operators <c2>
          ^name <c7> ^prohibits { <= <c2> <c1> } ^worsts { <= <c4> <c3> }
          ^worsts { <= <c6> <c5> })
    -->
    (<s1> ^result op4 +)
}

sp {answerx2*apply*op*OpNoChange*t35-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c2> ^numbers <c1>
          ^best-test <c2> ^better-test <c2> ^acceptable-test <c2>
          ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c5> ^operators <c4> ^name <c3> ^betters <b1> ^bests <c2>)
    (<b1> ^referent { <= <c4> <c1> } ^value { <= <c5> <c2> })
    -->
    (<s1> ^result op2 +)
}

sp {answer*apply*op*OpNoChange*t35-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c4> ^numbers <c1>
          ^best-test <c4> ^better-test <c4> ^acceptable-test <c4>
          ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c5> ^operators <c2> ^name <c3> ^betters <b1> ^bests <c4>)
    (<b1> ^referent { <= <c2> <c1> } ^value { <= <c5> <c4> })
    -->
    (<s1> ^result op2 +)
}

sp {answerx2*apply*op*OpNoChange*t29-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c2> ^numbers <c3>
          ^nindifferent-test <c2> ^bindifferent-test <c2>
          ^acceptable-test <c2> ^acceptable-test <c3>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c6> ^operators <c5> ^name <c4> ^binary-indifferents <b2>
          ^numerics <b1>)
    (<b2> ^referent { <= <c5> <c3> } ^value { <= <c6> <c2> })
    (<b1> ^value <c2> ^referent <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t29-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c4> ^numbers <c1>
          ^nindifferent-test <c4> ^bindifferent-test <c4>
          ^acceptable-test <c4> ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c5> ^operators <c2> ^name <c3> ^binary-indifferents <b1>
          ^numerics <b2>)
    (<b1> ^referent { <= <c2> <c1> } ^value { <= <c5> <c4> })
    (<b2> ^value <c4> ^referent <c6>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t23-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c1>
          ^require-test <c1> ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c3> ^name <c2> ^requires { <= <c3> <c1> })
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t23-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c1> ^require-test <c1>
          ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c3> ^name <c2> ^requires { <= <c3> <c1> })
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t17-2
        (state <s1> ^superstate nil ^operator <o1> ^worse-test { <= <c6> <c3> }
          ^numbers <c3> ^acceptable-test <c3> ^numbers <c2> ^better-test <c2>
          ^acceptable-test <c2> ^numbers <c1> ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c7> ^operators <c6> ^operators <c5> ^name <c4>
          ^worse <b2> ^betters <b1>)
    (<b2> ^value <c3> ^referent { <= <c7> <c2> })
    (<b1> ^value <c2> ^referent { <= <c5> <c1> })
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t17-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^worse-test { <= <c4> <c3> }
          ^numbers <c3> ^acceptable-test <c3> ^numbers <c6> ^better-test <c6>
          ^acceptable-test <c6> ^numbers <c1> ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c7> ^operators <c4> ^operators <c2> ^name <c5>
          ^worse <b1> ^betters <b2>)
    (<b1> ^value <c3> ^referent { <= <c7> <c6> })
    (<b2> ^value <c6> ^referent { <= <c2> <c1> })
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t11-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c1>
          ^nindifferent-test <c1> ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c4> ^name <c3> ^numerics <b1>)
    (<b1> ^referent <c2> ^value { <= <c4> <c1> })
    -->
    (<s1> ^result op2 +)
}

sp {answer*apply*op*OpNoChange*t11-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c2> ^nindifferent-test <c2>
          ^acceptable-test <c2>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c3> ^name <c1> ^numerics <b1>)
    (<b1> ^referent <c4> ^value { <= <c3> <c2> })
    -->
    (<s1> ^result op2 +)
}

sp {answerx2*apply*op*OpNoChange*t5-2
        (state <s1> ^superstate nil ^operator <o1> ^numbers <c5>
          ^prohibit-test <c5> ^acceptable-test <c5> ^numbers <c4>
          ^prohibit-test <c4> ^acceptable-test <c4> ^numbers <c3>
          ^reject-test <c3> ^acceptable-test <c3> ^numbers <c2>
          ^worst-test <c2> ^acceptable-test <c2> ^numbers { <= <c11> <c1> }
          ^acceptable-test <c1>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c11> ^operators <c10> ^operators <c9> ^operators <c8>
          ^operators <c7> ^name <c6> ^prohibits { <= <c7> <c5> }
          ^prohibits { <= <c8> <c4> } ^rejects { <= <c9> <c3> }
          ^worsts { <= <c10> <c2> })
    -->
    (<s1> ^result op4 +)
}

sp {answer*apply*op*OpNoChange*t5-1
        (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil ^operator <o1> ^numbers <c1> ^prohibit-test <c1>
          ^acceptable-test <c1> ^numbers <c3> ^prohibit-test <c3>
          ^acceptable-test <c3> ^numbers <c5> ^reject-test <c5>
          ^acceptable-test <c5> ^numbers <c7> ^worst-test <c7>
          ^acceptable-test <c7> ^numbers { <= <c11> <c10> }
          ^acceptable-test <c10>)
    (<o1> ^name do-test ^test <t1>)
    (<t1> ^operators <c11> ^operators <c8> ^operators <c6> ^operators <c4>
          ^operators <c2> ^name <c9> ^prohibits { <= <c2> <c1> }
          ^prohibits { <= <c4> <c3> } ^rejects { <= <c6> <c5> }
          ^worsts { <= <c8> <c7> })
    -->
    (<s1> ^result op4 +)
}
