# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Python_sml_ClientInterface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Python_sml_ClientInterface')
    _Python_sml_ClientInterface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Python_sml_ClientInterface', [dirname(__file__)])
        except ImportError:
            import _Python_sml_ClientInterface
            return _Python_sml_ClientInterface
        try:
            _mod = imp.load_module('_Python_sml_ClientInterface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Python_sml_ClientInterface = swig_import_helper()
    del swig_import_helper
else:
    import _Python_sml_ClientInterface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class sml_Names(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sml_Names, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sml_Names, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Python_sml_ClientInterface.new_sml_Names()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_sml_Names
    __del__ = lambda self: None
sml_Names_swigregister = _Python_sml_ClientInterface.sml_Names_swigregister
sml_Names_swigregister(sml_Names)
cvar = _Python_sml_ClientInterface.cvar
sml_Names.kTagSML = _Python_sml_ClientInterface.cvar.sml_Names_kTagSML
sml_Names.kID = _Python_sml_ClientInterface.cvar.sml_Names_kID
sml_Names.kAck = _Python_sml_ClientInterface.cvar.sml_Names_kAck
sml_Names.kDocType = _Python_sml_ClientInterface.cvar.sml_Names_kDocType
sml_Names.kDocType_Call = _Python_sml_ClientInterface.cvar.sml_Names_kDocType_Call
sml_Names.kDocType_Response = _Python_sml_ClientInterface.cvar.sml_Names_kDocType_Response
sml_Names.kDocType_Notify = _Python_sml_ClientInterface.cvar.sml_Names_kDocType_Notify
sml_Names.kSMLVersion = _Python_sml_ClientInterface.cvar.sml_Names_kSMLVersion
sml_Names.kOutputLinkName = _Python_sml_ClientInterface.cvar.sml_Names_kOutputLinkName
sml_Names.kSoarVersionValue = _Python_sml_ClientInterface.cvar.sml_Names_kSoarVersionValue
sml_Names.kSMLVersionValue = _Python_sml_ClientInterface.cvar.sml_Names_kSMLVersionValue
sml_Names.kTagCommand = _Python_sml_ClientInterface.cvar.sml_Names_kTagCommand
sml_Names.kCommandName = _Python_sml_ClientInterface.cvar.sml_Names_kCommandName
sml_Names.kCommandOutput = _Python_sml_ClientInterface.cvar.sml_Names_kCommandOutput
sml_Names.kRawOutput = _Python_sml_ClientInterface.cvar.sml_Names_kRawOutput
sml_Names.kStructuredOutput = _Python_sml_ClientInterface.cvar.sml_Names_kStructuredOutput
sml_Names.kTagConnection = _Python_sml_ClientInterface.cvar.sml_Names_kTagConnection
sml_Names.kConnectionId = _Python_sml_ClientInterface.cvar.sml_Names_kConnectionId
sml_Names.kConnectionName = _Python_sml_ClientInterface.cvar.sml_Names_kConnectionName
sml_Names.kConnectionStatus = _Python_sml_ClientInterface.cvar.sml_Names_kConnectionStatus
sml_Names.kAgentStatus = _Python_sml_ClientInterface.cvar.sml_Names_kAgentStatus
sml_Names.kStatusCreated = _Python_sml_ClientInterface.cvar.sml_Names_kStatusCreated
sml_Names.kStatusNotReady = _Python_sml_ClientInterface.cvar.sml_Names_kStatusNotReady
sml_Names.kStatusReady = _Python_sml_ClientInterface.cvar.sml_Names_kStatusReady
sml_Names.kStatusClosing = _Python_sml_ClientInterface.cvar.sml_Names_kStatusClosing
sml_Names.kTagArg = _Python_sml_ClientInterface.cvar.sml_Names_kTagArg
sml_Names.kArgParam = _Python_sml_ClientInterface.cvar.sml_Names_kArgParam
sml_Names.kArgType = _Python_sml_ClientInterface.cvar.sml_Names_kArgType
sml_Names.kTagError = _Python_sml_ClientInterface.cvar.sml_Names_kTagError
sml_Names.kErrorCode = _Python_sml_ClientInterface.cvar.sml_Names_kErrorCode
sml_Names.kTagName = _Python_sml_ClientInterface.cvar.sml_Names_kTagName
sml_Names.kTagResult = _Python_sml_ClientInterface.cvar.sml_Names_kTagResult
sml_Names.kValueDelta = _Python_sml_ClientInterface.cvar.sml_Names_kValueDelta
sml_Names.kValueFull = _Python_sml_ClientInterface.cvar.sml_Names_kValueFull
sml_Names.kTagRHS_write = _Python_sml_ClientInterface.cvar.sml_Names_kTagRHS_write
sml_Names.kRHS_String = _Python_sml_ClientInterface.cvar.sml_Names_kRHS_String
sml_Names.kTagTrace = _Python_sml_ClientInterface.cvar.sml_Names_kTagTrace
sml_Names.kTagState = _Python_sml_ClientInterface.cvar.sml_Names_kTagState
sml_Names.kTagOperator = _Python_sml_ClientInterface.cvar.sml_Names_kTagOperator
sml_Names.kState_ID = _Python_sml_ClientInterface.cvar.sml_Names_kState_ID
sml_Names.kState_Name = _Python_sml_ClientInterface.cvar.sml_Names_kState_Name
sml_Names.kState_DecisionCycleCt = _Python_sml_ClientInterface.cvar.sml_Names_kState_DecisionCycleCt
sml_Names.kState_ImpasseObject = _Python_sml_ClientInterface.cvar.sml_Names_kState_ImpasseObject
sml_Names.kState_ImpasseType = _Python_sml_ClientInterface.cvar.sml_Names_kState_ImpasseType
sml_Names.kState_StackLevel = _Python_sml_ClientInterface.cvar.sml_Names_kState_StackLevel
sml_Names.kOperator_ID = _Python_sml_ClientInterface.cvar.sml_Names_kOperator_ID
sml_Names.kOperator_Name = _Python_sml_ClientInterface.cvar.sml_Names_kOperator_Name
sml_Names.kOperator_DecisionCycleCt = _Python_sml_ClientInterface.cvar.sml_Names_kOperator_DecisionCycleCt
sml_Names.kOperator_StackLevel = _Python_sml_ClientInterface.cvar.sml_Names_kOperator_StackLevel
sml_Names.kTagPhase = _Python_sml_ClientInterface.cvar.sml_Names_kTagPhase
sml_Names.kPhase_Name = _Python_sml_ClientInterface.cvar.sml_Names_kPhase_Name
sml_Names.kPhase_Status = _Python_sml_ClientInterface.cvar.sml_Names_kPhase_Status
sml_Names.kPhase_FiringType = _Python_sml_ClientInterface.cvar.sml_Names_kPhase_FiringType
sml_Names.kPhase_LevelNum = _Python_sml_ClientInterface.cvar.sml_Names_kPhase_LevelNum
sml_Names.kPhaseName_Input = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Input
sml_Names.kPhaseName_Pref = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Pref
sml_Names.kPhaseName_WM = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_WM
sml_Names.kPhaseName_Decision = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Decision
sml_Names.kPhaseName_Output = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Output
sml_Names.kPhaseName_Propose = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Propose
sml_Names.kPhaseName_Apply = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Apply
sml_Names.kPhaseName_Unknown = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseName_Unknown
sml_Names.kPhaseStatus_Begin = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseStatus_Begin
sml_Names.kPhaseStatus_End = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseStatus_End
sml_Names.kPhaseFiringType_IE = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseFiringType_IE
sml_Names.kPhaseFiringType_PE = _Python_sml_ClientInterface.cvar.sml_Names_kPhaseFiringType_PE
sml_Names.kTagSubphase = _Python_sml_ClientInterface.cvar.sml_Names_kTagSubphase
sml_Names.kSubphaseName_FiringProductions = _Python_sml_ClientInterface.cvar.sml_Names_kSubphaseName_FiringProductions
sml_Names.kSubphaseName_ChangingWorkingMemory = _Python_sml_ClientInterface.cvar.sml_Names_kSubphaseName_ChangingWorkingMemory
sml_Names.kTagProduction = _Python_sml_ClientInterface.cvar.sml_Names_kTagProduction
sml_Names.kProduction_Name = _Python_sml_ClientInterface.cvar.sml_Names_kProduction_Name
sml_Names.kTagProduction_Firing = _Python_sml_ClientInterface.cvar.sml_Names_kTagProduction_Firing
sml_Names.kTagProduction_Retracting = _Python_sml_ClientInterface.cvar.sml_Names_kTagProduction_Retracting
sml_Names.kTagWME = _Python_sml_ClientInterface.cvar.sml_Names_kTagWME
sml_Names.kWME_TimeTag = _Python_sml_ClientInterface.cvar.sml_Names_kWME_TimeTag
sml_Names.kWME_Id = _Python_sml_ClientInterface.cvar.sml_Names_kWME_Id
sml_Names.kWME_Attribute = _Python_sml_ClientInterface.cvar.sml_Names_kWME_Attribute
sml_Names.kWME_Value = _Python_sml_ClientInterface.cvar.sml_Names_kWME_Value
sml_Names.kWME_ValueType = _Python_sml_ClientInterface.cvar.sml_Names_kWME_ValueType
sml_Names.kWME_AttributeType = _Python_sml_ClientInterface.cvar.sml_Names_kWME_AttributeType
sml_Names.kWME_Preference = _Python_sml_ClientInterface.cvar.sml_Names_kWME_Preference
sml_Names.kWME_Action = _Python_sml_ClientInterface.cvar.sml_Names_kWME_Action
sml_Names.kValueAdd = _Python_sml_ClientInterface.cvar.sml_Names_kValueAdd
sml_Names.kValueRemove = _Python_sml_ClientInterface.cvar.sml_Names_kValueRemove
sml_Names.kTagWMERemove = _Python_sml_ClientInterface.cvar.sml_Names_kTagWMERemove
sml_Names.kTagWMEAdd = _Python_sml_ClientInterface.cvar.sml_Names_kTagWMEAdd
sml_Names.kTagPreference = _Python_sml_ClientInterface.cvar.sml_Names_kTagPreference
sml_Names.kPreference_Type = _Python_sml_ClientInterface.cvar.sml_Names_kPreference_Type
sml_Names.kOSupported = _Python_sml_ClientInterface.cvar.sml_Names_kOSupported
sml_Names.kReferent = _Python_sml_ClientInterface.cvar.sml_Names_kReferent
sml_Names.kTagWarning = _Python_sml_ClientInterface.cvar.sml_Names_kTagWarning
sml_Names.kFunctionBeginTag = _Python_sml_ClientInterface.cvar.sml_Names_kFunctionBeginTag
sml_Names.kFunctionEndTag = _Python_sml_ClientInterface.cvar.sml_Names_kFunctionEndTag
sml_Names.kFunctionAddAttribute = _Python_sml_ClientInterface.cvar.sml_Names_kFunctionAddAttribute
sml_Names.kTagLearning = _Python_sml_ClientInterface.cvar.sml_Names_kTagLearning
sml_Names.kTagFilter = _Python_sml_ClientInterface.cvar.sml_Names_kTagFilter
sml_Names.kFilterCommand = _Python_sml_ClientInterface.cvar.sml_Names_kFilterCommand
sml_Names.kFilterError = _Python_sml_ClientInterface.cvar.sml_Names_kFilterError
sml_Names.kFilterOutput = _Python_sml_ClientInterface.cvar.sml_Names_kFilterOutput
sml_Names.kFilterName = _Python_sml_ClientInterface.cvar.sml_Names_kFilterName
sml_Names.kParamNoFiltering = _Python_sml_ClientInterface.cvar.sml_Names_kParamNoFiltering
sml_Names.kTagConditions = _Python_sml_ClientInterface.cvar.sml_Names_kTagConditions
sml_Names.kTagConjunctive_Negation_Condition = _Python_sml_ClientInterface.cvar.sml_Names_kTagConjunctive_Negation_Condition
sml_Names.kTagCondition = _Python_sml_ClientInterface.cvar.sml_Names_kTagCondition
sml_Names.kTagActions = _Python_sml_ClientInterface.cvar.sml_Names_kTagActions
sml_Names.kTagAction = _Python_sml_ClientInterface.cvar.sml_Names_kTagAction
sml_Names.kProductionDocumentation = _Python_sml_ClientInterface.cvar.sml_Names_kProductionDocumentation
sml_Names.kProductionType = _Python_sml_ClientInterface.cvar.sml_Names_kProductionType
sml_Names.kProductionTypeDefault = _Python_sml_ClientInterface.cvar.sml_Names_kProductionTypeDefault
sml_Names.kProductionTypeChunk = _Python_sml_ClientInterface.cvar.sml_Names_kProductionTypeChunk
sml_Names.kProductionTypeJustification = _Python_sml_ClientInterface.cvar.sml_Names_kProductionTypeJustification
sml_Names.kProductionDeclaredSupport = _Python_sml_ClientInterface.cvar.sml_Names_kProductionDeclaredSupport
sml_Names.kProductionDeclaredOSupport = _Python_sml_ClientInterface.cvar.sml_Names_kProductionDeclaredOSupport
sml_Names.kProductionDeclaredISupport = _Python_sml_ClientInterface.cvar.sml_Names_kProductionDeclaredISupport
sml_Names.kConditionId = _Python_sml_ClientInterface.cvar.sml_Names_kConditionId
sml_Names.kConditionTest = _Python_sml_ClientInterface.cvar.sml_Names_kConditionTest
sml_Names.kConditionTestState = _Python_sml_ClientInterface.cvar.sml_Names_kConditionTestState
sml_Names.kConditionTestImpasse = _Python_sml_ClientInterface.cvar.sml_Names_kConditionTestImpasse
sml_Names.kCondition = _Python_sml_ClientInterface.cvar.sml_Names_kCondition
sml_Names.kAction = _Python_sml_ClientInterface.cvar.sml_Names_kAction
sml_Names.kActionFunction = _Python_sml_ClientInterface.cvar.sml_Names_kActionFunction
sml_Names.kActionId = _Python_sml_ClientInterface.cvar.sml_Names_kActionId
sml_Names.kTagBacktrace = _Python_sml_ClientInterface.cvar.sml_Names_kTagBacktrace
sml_Names.kTagGrounds = _Python_sml_ClientInterface.cvar.sml_Names_kTagGrounds
sml_Names.kTagLocals = _Python_sml_ClientInterface.cvar.sml_Names_kTagLocals
sml_Names.kTagLocal = _Python_sml_ClientInterface.cvar.sml_Names_kTagLocal
sml_Names.kTagBacktraceResult = _Python_sml_ClientInterface.cvar.sml_Names_kTagBacktraceResult
sml_Names.kTagOSKPreference = _Python_sml_ClientInterface.cvar.sml_Names_kTagOSKPreference
sml_Names.kTagNegated = _Python_sml_ClientInterface.cvar.sml_Names_kTagNegated
sml_Names.kBacktracedAlready = _Python_sml_ClientInterface.cvar.sml_Names_kBacktracedAlready
sml_Names.kBacktraceSymbol1 = _Python_sml_ClientInterface.cvar.sml_Names_kBacktraceSymbol1
sml_Names.kBacktraceSymbol2 = _Python_sml_ClientInterface.cvar.sml_Names_kBacktraceSymbol2
sml_Names.kTagLocalNegation = _Python_sml_ClientInterface.cvar.sml_Names_kTagLocalNegation
sml_Names.kTagCandidate = _Python_sml_ClientInterface.cvar.sml_Names_kTagCandidate
sml_Names.kCandidateName = _Python_sml_ClientInterface.cvar.sml_Names_kCandidateName
sml_Names.kCandidateType = _Python_sml_ClientInterface.cvar.sml_Names_kCandidateType
sml_Names.kCandidateTypeSum = _Python_sml_ClientInterface.cvar.sml_Names_kCandidateTypeSum
sml_Names.kCandidateTypeAvg = _Python_sml_ClientInterface.cvar.sml_Names_kCandidateTypeAvg
sml_Names.kCandidateValue = _Python_sml_ClientInterface.cvar.sml_Names_kCandidateValue
sml_Names.kCandidateExpValue = _Python_sml_ClientInterface.cvar.sml_Names_kCandidateExpValue
sml_Names.kTagVerbose = _Python_sml_ClientInterface.cvar.sml_Names_kTagVerbose
sml_Names.kTagMessage = _Python_sml_ClientInterface.cvar.sml_Names_kTagMessage
sml_Names.kTagActionSideMarker = _Python_sml_ClientInterface.cvar.sml_Names_kTagActionSideMarker
sml_Names.kTypeString = _Python_sml_ClientInterface.cvar.sml_Names_kTypeString
sml_Names.kTypeInt = _Python_sml_ClientInterface.cvar.sml_Names_kTypeInt
sml_Names.kTypeDouble = _Python_sml_ClientInterface.cvar.sml_Names_kTypeDouble
sml_Names.kTypeChar = _Python_sml_ClientInterface.cvar.sml_Names_kTypeChar
sml_Names.kTypeBoolean = _Python_sml_ClientInterface.cvar.sml_Names_kTypeBoolean
sml_Names.kTypeID = _Python_sml_ClientInterface.cvar.sml_Names_kTypeID
sml_Names.kTypeVariable = _Python_sml_ClientInterface.cvar.sml_Names_kTypeVariable
sml_Names.kParamAgent = _Python_sml_ClientInterface.cvar.sml_Names_kParamAgent
sml_Names.kParamKernel = _Python_sml_ClientInterface.cvar.sml_Names_kParamKernel
sml_Names.kParamThis = _Python_sml_ClientInterface.cvar.sml_Names_kParamThis
sml_Names.kParamName = _Python_sml_ClientInterface.cvar.sml_Names_kParamName
sml_Names.kParamFilename = _Python_sml_ClientInterface.cvar.sml_Names_kParamFilename
sml_Names.kParamLearning = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearning
sml_Names.kParamOSupportMode = _Python_sml_ClientInterface.cvar.sml_Names_kParamOSupportMode
sml_Names.kParamValue = _Python_sml_ClientInterface.cvar.sml_Names_kParamValue
sml_Names.kParamWme = _Python_sml_ClientInterface.cvar.sml_Names_kParamWme
sml_Names.kParamWmeObject = _Python_sml_ClientInterface.cvar.sml_Names_kParamWmeObject
sml_Names.kParamAttribute = _Python_sml_ClientInterface.cvar.sml_Names_kParamAttribute
sml_Names.kParamCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamCount
sml_Names.kParamLength = _Python_sml_ClientInterface.cvar.sml_Names_kParamLength
sml_Names.kParamThread = _Python_sml_ClientInterface.cvar.sml_Names_kParamThread
sml_Names.kParamProcess = _Python_sml_ClientInterface.cvar.sml_Names_kParamProcess
sml_Names.kParamLine = _Python_sml_ClientInterface.cvar.sml_Names_kParamLine
sml_Names.kParamEcho = _Python_sml_ClientInterface.cvar.sml_Names_kParamEcho
sml_Names.kParamLocation = _Python_sml_ClientInterface.cvar.sml_Names_kParamLocation
sml_Names.kParamLogLocation = _Python_sml_ClientInterface.cvar.sml_Names_kParamLogLocation
sml_Names.kParamLogLevel = _Python_sml_ClientInterface.cvar.sml_Names_kParamLogLevel
sml_Names.kParamInputProducer = _Python_sml_ClientInterface.cvar.sml_Names_kParamInputProducer
sml_Names.kParamOutputProcessor = _Python_sml_ClientInterface.cvar.sml_Names_kParamOutputProcessor
sml_Names.kParamWorkingMemory = _Python_sml_ClientInterface.cvar.sml_Names_kParamWorkingMemory
sml_Names.kParamAttributePath = _Python_sml_ClientInterface.cvar.sml_Names_kParamAttributePath
sml_Names.kParamUpdate = _Python_sml_ClientInterface.cvar.sml_Names_kParamUpdate
sml_Names.kParamEventID = _Python_sml_ClientInterface.cvar.sml_Names_kParamEventID
sml_Names.kParamLearnSetting = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearnSetting
sml_Names.kParamLearnOnlySetting = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearnOnlySetting
sml_Names.kParamLearnExceptSetting = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearnExceptSetting
sml_Names.kParamLearnAllLevelsSetting = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearnAllLevelsSetting
sml_Names.kParamLearnForceLearnStates = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearnForceLearnStates
sml_Names.kParamLearnDontLearnStates = _Python_sml_ClientInterface.cvar.sml_Names_kParamLearnDontLearnStates
sml_Names.kParamLogSetting = _Python_sml_ClientInterface.cvar.sml_Names_kParamLogSetting
sml_Names.kParamDirectory = _Python_sml_ClientInterface.cvar.sml_Names_kParamDirectory
sml_Names.kParamProcSeconds = _Python_sml_ClientInterface.cvar.sml_Names_kParamProcSeconds
sml_Names.kParamRealSeconds = _Python_sml_ClientInterface.cvar.sml_Names_kParamRealSeconds
sml_Names.kParamWarningsSetting = _Python_sml_ClientInterface.cvar.sml_Names_kParamWarningsSetting
sml_Names.kParamPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamPhase
sml_Names.kParamDecision = _Python_sml_ClientInterface.cvar.sml_Names_kParamDecision
sml_Names.kParamRunState = _Python_sml_ClientInterface.cvar.sml_Names_kParamRunState
sml_Names.kParamInstance = _Python_sml_ClientInterface.cvar.sml_Names_kParamInstance
sml_Names.kParamTimers = _Python_sml_ClientInterface.cvar.sml_Names_kParamTimers
sml_Names.kParamMessage = _Python_sml_ClientInterface.cvar.sml_Names_kParamMessage
sml_Names.kParamSelf = _Python_sml_ClientInterface.cvar.sml_Names_kParamSelf
sml_Names.kParamAlias = _Python_sml_ClientInterface.cvar.sml_Names_kParamAlias
sml_Names.kParamAliasedCommand = _Python_sml_ClientInterface.cvar.sml_Names_kParamAliasedCommand
sml_Names.kParamIndifferentSelectionMode = _Python_sml_ClientInterface.cvar.sml_Names_kParamIndifferentSelectionMode
sml_Names.kParamNumericIndifferentMode = _Python_sml_ClientInterface.cvar.sml_Names_kParamNumericIndifferentMode
sml_Names.kParamRunResult = _Python_sml_ClientInterface.cvar.sml_Names_kParamRunResult
sml_Names.kParamVersionMajor = _Python_sml_ClientInterface.cvar.sml_Names_kParamVersionMajor
sml_Names.kParamVersionMinor = _Python_sml_ClientInterface.cvar.sml_Names_kParamVersionMinor
sml_Names.kParamVersionMicro = _Python_sml_ClientInterface.cvar.sml_Names_kParamVersionMicro
sml_Names.kParamBuildDate = _Python_sml_ClientInterface.cvar.sml_Names_kParamBuildDate
sml_Names.kParamWaitSNC = _Python_sml_ClientInterface.cvar.sml_Names_kParamWaitSNC
sml_Names.kParamFunction = _Python_sml_ClientInterface.cvar.sml_Names_kParamFunction
sml_Names.kParamChunkNamePrefix = _Python_sml_ClientInterface.cvar.sml_Names_kParamChunkNamePrefix
sml_Names.kParamChunkCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamChunkCount
sml_Names.kParamChunkLongFormat = _Python_sml_ClientInterface.cvar.sml_Names_kParamChunkLongFormat
sml_Names.kParamPort = _Python_sml_ClientInterface.cvar.sml_Names_kParamPort
sml_Names.kParamSourcedProductionCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamSourcedProductionCount
sml_Names.kParamExcisedProductionCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamExcisedProductionCount
sml_Names.kParamIgnoredProductionCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamIgnoredProductionCount
sml_Names.kParamStatsProductionCountDefault = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsProductionCountDefault
sml_Names.kParamStatsProductionCountUser = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsProductionCountUser
sml_Names.kParamStatsProductionCountChunk = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsProductionCountChunk
sml_Names.kParamStatsProductionCountJustification = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsProductionCountJustification
sml_Names.kParamStatsCycleCountDecision = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsCycleCountDecision
sml_Names.kParamStatsCycleCountElaboration = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsCycleCountElaboration
sml_Names.kParamStatsCycleCountInnerElaboration = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsCycleCountInnerElaboration
sml_Names.kParamStatsProductionFiringCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsProductionFiringCount
sml_Names.kParamStatsWmeCountAddition = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsWmeCountAddition
sml_Names.kParamStatsWmeCountRemoval = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsWmeCountRemoval
sml_Names.kParamStatsWmeCount = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsWmeCount
sml_Names.kParamStatsWmeCountAverage = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsWmeCountAverage
sml_Names.kParamStatsWmeCountMax = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsWmeCountMax
sml_Names.kParamStatsKernelCPUTime = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsKernelCPUTime
sml_Names.kParamStatsTotalCPUTime = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsTotalCPUTime
sml_Names.kParamStatsPhaseTimeInputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimeInputPhase
sml_Names.kParamStatsPhaseTimeProposePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimeProposePhase
sml_Names.kParamStatsPhaseTimeDecisionPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimeDecisionPhase
sml_Names.kParamStatsPhaseTimeApplyPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimeApplyPhase
sml_Names.kParamStatsPhaseTimeOutputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimeOutputPhase
sml_Names.kParamStatsPhaseTimePreferencePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimePreferencePhase
sml_Names.kParamStatsPhaseTimeWorkingMemoryPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsPhaseTimeWorkingMemoryPhase
sml_Names.kParamStatsMonitorTimeInputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimeInputPhase
sml_Names.kParamStatsMonitorTimeProposePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimeProposePhase
sml_Names.kParamStatsMonitorTimeDecisionPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimeDecisionPhase
sml_Names.kParamStatsMonitorTimeApplyPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimeApplyPhase
sml_Names.kParamStatsMonitorTimeOutputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimeOutputPhase
sml_Names.kParamStatsMonitorTimePreferencePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimePreferencePhase
sml_Names.kParamStatsMonitorTimeWorkingMemoryPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMonitorTimeWorkingMemoryPhase
sml_Names.kParamStatsInputFunctionTime = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsInputFunctionTime
sml_Names.kParamStatsOutputFunctionTime = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOutputFunctionTime
sml_Names.kParamStatsMatchTimeInputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimeInputPhase
sml_Names.kParamStatsMatchTimePreferencePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimePreferencePhase
sml_Names.kParamStatsMatchTimeWorkingMemoryPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimeWorkingMemoryPhase
sml_Names.kParamStatsMatchTimeOutputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimeOutputPhase
sml_Names.kParamStatsMatchTimeDecisionPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimeDecisionPhase
sml_Names.kParamStatsMatchTimeProposePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimeProposePhase
sml_Names.kParamStatsMatchTimeApplyPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMatchTimeApplyPhase
sml_Names.kParamStatsOwnershipTimeInputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimeInputPhase
sml_Names.kParamStatsOwnershipTimePreferencePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimePreferencePhase
sml_Names.kParamStatsOwnershipTimeWorkingMemoryPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimeWorkingMemoryPhase
sml_Names.kParamStatsOwnershipTimeOutputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimeOutputPhase
sml_Names.kParamStatsOwnershipTimeDecisionPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimeDecisionPhase
sml_Names.kParamStatsOwnershipTimeProposePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimeProposePhase
sml_Names.kParamStatsOwnershipTimeApplyPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsOwnershipTimeApplyPhase
sml_Names.kParamStatsChunkingTimeInputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimeInputPhase
sml_Names.kParamStatsChunkingTimePreferencePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimePreferencePhase
sml_Names.kParamStatsChunkingTimeWorkingMemoryPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimeWorkingMemoryPhase
sml_Names.kParamStatsChunkingTimeOutputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimeOutputPhase
sml_Names.kParamStatsChunkingTimeDecisionPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimeDecisionPhase
sml_Names.kParamStatsChunkingTimeProposePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimeProposePhase
sml_Names.kParamStatsChunkingTimeApplyPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsChunkingTimeApplyPhase
sml_Names.kParamStatsGDSTimeInputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimeInputPhase
sml_Names.kParamStatsGDSTimePreferencePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimePreferencePhase
sml_Names.kParamStatsGDSTimeWorkingMemoryPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimeWorkingMemoryPhase
sml_Names.kParamStatsGDSTimeOutputPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimeOutputPhase
sml_Names.kParamStatsGDSTimeDecisionPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimeDecisionPhase
sml_Names.kParamStatsGDSTimeProposePhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimeProposePhase
sml_Names.kParamStatsGDSTimeApplyPhase = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsGDSTimeApplyPhase
sml_Names.kParamStatsMemoryUsageMiscellaneous = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMemoryUsageMiscellaneous
sml_Names.kParamStatsMemoryUsageHash = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMemoryUsageHash
sml_Names.kParamStatsMemoryUsageString = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMemoryUsageString
sml_Names.kParamStatsMemoryUsagePool = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMemoryUsagePool
sml_Names.kParamStatsMemoryUsageStatsOverhead = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMemoryUsageStatsOverhead
sml_Names.kParamStatsMaxDecisionCycleTimeValueSec = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleTimeValueSec
sml_Names.kParamStatsMaxDecisionCycleTimeValueUSec = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleTimeValueUSec
sml_Names.kParamStatsMaxDecisionCycleTimeCycle = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleTimeCycle
sml_Names.kParamStatsMaxDecisionCycleEpMemTimeCycle = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleEpMemTimeCycle
sml_Names.kParamStatsMaxDecisionCycleEpMemTimeValueSec = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleEpMemTimeValueSec
sml_Names.kParamStatsMaxDecisionCycleSMemTimeCycle = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleSMemTimeCycle
sml_Names.kParamStatsMaxDecisionCycleSMemTimeValueSec = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleSMemTimeValueSec
sml_Names.kParamStatsMaxDecisionCycleWMChangesCycle = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleWMChangesCycle
sml_Names.kParamStatsMaxDecisionCycleWMChangesValue = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleWMChangesValue
sml_Names.kParamStatsMaxDecisionCycleFireCountCycle = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleFireCountCycle
sml_Names.kParamStatsMaxDecisionCycleFireCountValue = _Python_sml_ClientInterface.cvar.sml_Names_kParamStatsMaxDecisionCycleFireCountValue
sml_Names.kParamWatchDecisions = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchDecisions
sml_Names.kParamWatchPhases = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchPhases
sml_Names.kParamWatchProductionDefault = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchProductionDefault
sml_Names.kParamWatchProductionUser = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchProductionUser
sml_Names.kParamWatchProductionChunks = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchProductionChunks
sml_Names.kParamWatchProductionJustifications = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchProductionJustifications
sml_Names.kParamWatchProductionTemplates = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchProductionTemplates
sml_Names.kParamWatchWMEDetail = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchWMEDetail
sml_Names.kParamWatchWorkingMemoryChanges = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchWorkingMemoryChanges
sml_Names.kParamWatchPreferences = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchPreferences
sml_Names.kParamWatchLearning = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchLearning
sml_Names.kParamWatchBacktracing = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchBacktracing
sml_Names.kParamWatchIndifferentSelection = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchIndifferentSelection
sml_Names.kParamWatchRL = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchRL
sml_Names.kParamWatchWaterfall = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchWaterfall
sml_Names.kParamWatchEpMem = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchEpMem
sml_Names.kParamWatchSMem = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchSMem
sml_Names.kParamWatchWMA = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchWMA
sml_Names.kParamWatchGDS = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchGDS
sml_Names.kParamWatchGDSStateRemoval = _Python_sml_ClientInterface.cvar.sml_Names_kParamWatchGDSStateRemoval
sml_Names.kTrue = _Python_sml_ClientInterface.cvar.sml_Names_kTrue
sml_Names.kFalse = _Python_sml_ClientInterface.cvar.sml_Names_kFalse
sml_Names.kCommand_CreateAgent = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_CreateAgent
sml_Names.kCommand_DestroyAgent = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_DestroyAgent
sml_Names.kCommand_GetAgentList = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetAgentList
sml_Names.kCommand_GetInputLink = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetInputLink
sml_Names.kCommand_GetOutputLink = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetOutputLink
sml_Names.kCommand_Run = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_Run
sml_Names.kCommand_Input = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_Input
sml_Names.kCommand_Output = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_Output
sml_Names.kCommand_StopOnOutput = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_StopOnOutput
sml_Names.kCommand_RegisterForEvent = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_RegisterForEvent
sml_Names.kCommand_UnregisterForEvent = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_UnregisterForEvent
sml_Names.kCommand_Event = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_Event
sml_Names.kCommand_FireEvent = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_FireEvent
sml_Names.kCommand_SuppressEvent = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SuppressEvent
sml_Names.kCommand_CheckForIncomingCommands = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_CheckForIncomingCommands
sml_Names.kCommand_SetInterruptCheckRate = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SetInterruptCheckRate
sml_Names.kCommand_Shutdown = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_Shutdown
sml_Names.kCommand_GetVersion = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetVersion
sml_Names.kCommand_IsSoarRunning = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_IsSoarRunning
sml_Names.kCommand_GetConnections = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetConnections
sml_Names.kCommand_SetConnectionInfo = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SetConnectionInfo
sml_Names.kCommand_GetAllInput = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetAllInput
sml_Names.kCommand_GetAllOutput = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetAllOutput
sml_Names.kCommand_GetRunState = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetRunState
sml_Names.kCommand_IsProductionLoaded = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_IsProductionLoaded
sml_Names.kCommand_SendClientMessage = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SendClientMessage
sml_Names.kCommand_WasAgentOnRunList = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_WasAgentOnRunList
sml_Names.kCommand_GetResultOfLastRun = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetResultOfLastRun
sml_Names.kCommand_GetInitialTimeTag = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetInitialTimeTag
sml_Names.kCommand_OutputInit = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_OutputInit
sml_Names.kCommand_ConvertIdentifier = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_ConvertIdentifier
sml_Names.kCommand_GetListenerPort = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_GetListenerPort
sml_Names.kCommand_CommandLine = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_CommandLine
sml_Names.kCommand_SVSInput = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SVSInput
sml_Names.kCommand_SVSOutput = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SVSOutput
sml_Names.kCommand_SVSQuery = _Python_sml_ClientInterface.cvar.sml_Names_kCommand_SVSQuery

class ElementXML(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementXML, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementXML, name)
    __repr__ = _swig_repr
    if _newclass:
        IsValidID = staticmethod(_Python_sml_ClientInterface.ElementXML_IsValidID)
    else:
        IsValidID = _Python_sml_ClientInterface.ElementXML_IsValidID

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_ElementXML(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ElementXML
    __del__ = lambda self: None

    def ReleaseRefOnHandle(self) -> "int":
        return _Python_sml_ClientInterface.ElementXML_ReleaseRefOnHandle(self)

    def AddRefOnHandle(self) -> "int":
        return _Python_sml_ClientInterface.ElementXML_AddRefOnHandle(self)

    def GetRefCount(self) -> "int":
        return _Python_sml_ClientInterface.ElementXML_GetRefCount(self)

    def Attach(self, hXML: 'ElementXML_Handle') -> "void":
        return _Python_sml_ClientInterface.ElementXML_Attach(self, hXML)

    def Detach(self) -> "ElementXML_Handle":
        return _Python_sml_ClientInterface.ElementXML_Detach(self)

    def GetXMLHandle(self) -> "ElementXML_Handle":
        return _Python_sml_ClientInterface.ElementXML_GetXMLHandle(self)

    def SetTagName(self, tagName: 'char *', copyName: 'bool'=True) -> "bool":
        return _Python_sml_ClientInterface.ElementXML_SetTagName(self, tagName, copyName)

    def SetTagNameConst(self, tagName: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_SetTagNameConst(self, tagName)

    def GetTagName(self) -> "char const *":
        return _Python_sml_ClientInterface.ElementXML_GetTagName(self)

    def IsTag(self, pTagName: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_IsTag(self, pTagName)

    def SetComment(self, pComment: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_SetComment(self, pComment)

    def GetComment(self) -> "char const *":
        return _Python_sml_ClientInterface.ElementXML_GetComment(self)

    def AddChild(self, pChild: 'ElementXML') -> "ElementXML_Handle":
        return _Python_sml_ClientInterface.ElementXML_AddChild(self, pChild)

    def GetNumberChildren(self) -> "int":
        return _Python_sml_ClientInterface.ElementXML_GetNumberChildren(self)

    def GetChild(self, pChild: 'ElementXML', index: 'int') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_GetChild(self, pChild, index)

    def GetParent(self, pParent: 'ElementXML') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_GetParent(self, pParent)

    def MakeCopy(self) -> "soarxml::ElementXML *":
        return _Python_sml_ClientInterface.ElementXML_MakeCopy(self)

    def AddAttribute(self, attributeName: 'char *', attributeValue: 'char *', copyName: 'bool'=True, copyValue: 'bool'=True) -> "bool":
        return _Python_sml_ClientInterface.ElementXML_AddAttribute(self, attributeName, attributeValue, copyName, copyValue)

    def AddAttributeConst(self, attributeName: 'char const *', attributeValue: 'char *') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_AddAttributeConst(self, attributeName, attributeValue)

    def AddAttributeConstConst(self, attributeName: 'char const *', attributeValue: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.ElementXML_AddAttributeConstConst(self, attributeName, attributeValue)

    def GetNumberAttributes(self) -> "int":
        return _Python_sml_ClientInterface.ElementXML_GetNumberAttributes(self)

    def GetAttributeName(self, index: 'int') -> "char const *":
        return _Python_sml_ClientInterface.ElementXML_GetAttributeName(self, index)

    def GetAttributeValue(self, index: 'int') -> "char const *":
        return _Python_sml_ClientInterface.ElementXML_GetAttributeValue(self, index)

    def GetAttribute(self, attName: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.ElementXML_GetAttribute(self, attName)

    def SetCharacterData(self, characterData: 'char *', copyData: 'bool'=True) -> "void":
        return _Python_sml_ClientInterface.ElementXML_SetCharacterData(self, characterData, copyData)

    def SetCharacterDataConst(self, characterData: 'char const *') -> "void":
        return _Python_sml_ClientInterface.ElementXML_SetCharacterDataConst(self, characterData)

    def SetBinaryCharacterData(self, characterData: 'char *', length: 'int', copyData: 'bool'=True) -> "void":
        return _Python_sml_ClientInterface.ElementXML_SetBinaryCharacterData(self, characterData, length, copyData)

    def SetBinaryCharacterDataConst(self, characterData: 'char const *', length: 'int') -> "void":
        return _Python_sml_ClientInterface.ElementXML_SetBinaryCharacterDataConst(self, characterData, length)

    def GetCharacterData(self) -> "char const *":
        return _Python_sml_ClientInterface.ElementXML_GetCharacterData(self)

    def IsCharacterDataBinary(self) -> "bool":
        return _Python_sml_ClientInterface.ElementXML_IsCharacterDataBinary(self)

    def ConvertCharacterDataToBinary(self) -> "bool":
        return _Python_sml_ClientInterface.ElementXML_ConvertCharacterDataToBinary(self)

    def GetCharacterDataLength(self) -> "int":
        return _Python_sml_ClientInterface.ElementXML_GetCharacterDataLength(self)

    def SetUseCData(self, useCData: 'bool') -> "void":
        return _Python_sml_ClientInterface.ElementXML_SetUseCData(self, useCData)

    def GetUseCData(self) -> "bool":
        return _Python_sml_ClientInterface.ElementXML_GetUseCData(self)

    def GenerateXMLString(self, includeChildren: 'bool', insertNewLines: 'bool'=False) -> "char *":
        return _Python_sml_ClientInterface.ElementXML_GenerateXMLString(self, includeChildren, insertNewLines)

    def DetermineXMLStringLength(self, includeChildren: 'bool', insertNewLines: 'bool'=False) -> "int":
        return _Python_sml_ClientInterface.ElementXML_DetermineXMLStringLength(self, includeChildren, insertNewLines)
    if _newclass:
        AllocateString = staticmethod(_Python_sml_ClientInterface.ElementXML_AllocateString)
    else:
        AllocateString = _Python_sml_ClientInterface.ElementXML_AllocateString
    if _newclass:
        DeleteString = staticmethod(_Python_sml_ClientInterface.ElementXML_DeleteString)
    else:
        DeleteString = _Python_sml_ClientInterface.ElementXML_DeleteString
    if _newclass:
        CopyString = staticmethod(_Python_sml_ClientInterface.ElementXML_CopyString)
    else:
        CopyString = _Python_sml_ClientInterface.ElementXML_CopyString
    if _newclass:
        CopyBuffer = staticmethod(_Python_sml_ClientInterface.ElementXML_CopyBuffer)
    else:
        CopyBuffer = _Python_sml_ClientInterface.ElementXML_CopyBuffer
    if _newclass:
        ParseXMLFromString = staticmethod(_Python_sml_ClientInterface.ElementXML_ParseXMLFromString)
    else:
        ParseXMLFromString = _Python_sml_ClientInterface.ElementXML_ParseXMLFromString
    if _newclass:
        ParseXMLFromStringSequence = staticmethod(_Python_sml_ClientInterface.ElementXML_ParseXMLFromStringSequence)
    else:
        ParseXMLFromStringSequence = _Python_sml_ClientInterface.ElementXML_ParseXMLFromStringSequence
    if _newclass:
        ParseXMLFromFile = staticmethod(_Python_sml_ClientInterface.ElementXML_ParseXMLFromFile)
    else:
        ParseXMLFromFile = _Python_sml_ClientInterface.ElementXML_ParseXMLFromFile
    if _newclass:
        GetLastParseErrorDescription = staticmethod(_Python_sml_ClientInterface.ElementXML_GetLastParseErrorDescription)
    else:
        GetLastParseErrorDescription = _Python_sml_ClientInterface.ElementXML_GetLastParseErrorDescription
ElementXML_swigregister = _Python_sml_ClientInterface.ElementXML_swigregister
ElementXML_swigregister(ElementXML)

def ElementXML_IsValidID(str: 'char const *') -> "bool":
    return _Python_sml_ClientInterface.ElementXML_IsValidID(str)
ElementXML_IsValidID = _Python_sml_ClientInterface.ElementXML_IsValidID

def ElementXML_AllocateString(length: 'int') -> "char *":
    return _Python_sml_ClientInterface.ElementXML_AllocateString(length)
ElementXML_AllocateString = _Python_sml_ClientInterface.ElementXML_AllocateString

def ElementXML_DeleteString(pString: 'char *') -> "void":
    return _Python_sml_ClientInterface.ElementXML_DeleteString(pString)
ElementXML_DeleteString = _Python_sml_ClientInterface.ElementXML_DeleteString

def ElementXML_CopyString(original: 'char const *') -> "char *":
    return _Python_sml_ClientInterface.ElementXML_CopyString(original)
ElementXML_CopyString = _Python_sml_ClientInterface.ElementXML_CopyString

def ElementXML_CopyBuffer(original: 'char const *', length: 'int') -> "char *":
    return _Python_sml_ClientInterface.ElementXML_CopyBuffer(original, length)
ElementXML_CopyBuffer = _Python_sml_ClientInterface.ElementXML_CopyBuffer

def ElementXML_ParseXMLFromString(pString: 'char const *') -> "soarxml::ElementXML *":
    return _Python_sml_ClientInterface.ElementXML_ParseXMLFromString(pString)
ElementXML_ParseXMLFromString = _Python_sml_ClientInterface.ElementXML_ParseXMLFromString

def ElementXML_ParseXMLFromStringSequence(pString: 'char const *', startPos: 'size_t', endPos: 'size_t *') -> "soarxml::ElementXML *":
    return _Python_sml_ClientInterface.ElementXML_ParseXMLFromStringSequence(pString, startPos, endPos)
ElementXML_ParseXMLFromStringSequence = _Python_sml_ClientInterface.ElementXML_ParseXMLFromStringSequence

def ElementXML_ParseXMLFromFile(pFilename: 'char const *') -> "soarxml::ElementXML *":
    return _Python_sml_ClientInterface.ElementXML_ParseXMLFromFile(pFilename)
ElementXML_ParseXMLFromFile = _Python_sml_ClientInterface.ElementXML_ParseXMLFromFile

def ElementXML_GetLastParseErrorDescription() -> "char const *":
    return _Python_sml_ClientInterface.ElementXML_GetLastParseErrorDescription()
ElementXML_GetLastParseErrorDescription = _Python_sml_ClientInterface.ElementXML_GetLastParseErrorDescription

class AnalyzeXML(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalyzeXML, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalyzeXML, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Python_sml_ClientInterface.new_AnalyzeXML()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_AnalyzeXML
    __del__ = lambda self: None

    def Analyze(self, pRootXML: 'ElementXML') -> "void":
        return _Python_sml_ClientInterface.AnalyzeXML_Analyze(self, pRootXML)

    def GetElementXMLHandle(self) -> "ElementXML_Handle":
        return _Python_sml_ClientInterface.AnalyzeXML_GetElementXMLHandle(self)

    def GetCommandTag(self) -> "soarxml::ElementXML const *":
        return _Python_sml_ClientInterface.AnalyzeXML_GetCommandTag(self)

    def GetResultTag(self) -> "soarxml::ElementXML const *":
        return _Python_sml_ClientInterface.AnalyzeXML_GetResultTag(self)

    def GetErrorTag(self) -> "soarxml::ElementXML const *":
        return _Python_sml_ClientInterface.AnalyzeXML_GetErrorTag(self)

    def IsSML(self) -> "bool":
        return _Python_sml_ClientInterface.AnalyzeXML_IsSML(self)

    def GetCommandName(self) -> "char const *":
        return _Python_sml_ClientInterface.AnalyzeXML_GetCommandName(self)

    def GetResultString(self) -> "char const *":
        return _Python_sml_ClientInterface.AnalyzeXML_GetResultString(self)

    def GetResultInt(self, *args) -> "int64_t":
        return _Python_sml_ClientInterface.AnalyzeXML_GetResultInt(self, *args)

    def GetResultBool(self, defaultValue: 'bool') -> "bool":
        return _Python_sml_ClientInterface.AnalyzeXML_GetResultBool(self, defaultValue)

    def GetResultFloat(self, defaultValue: 'double') -> "double":
        return _Python_sml_ClientInterface.AnalyzeXML_GetResultFloat(self, defaultValue)

    def GenerateXMLString(self, includeChildren: 'bool', insertNewLines: 'bool'=False) -> "char *":
        return _Python_sml_ClientInterface.AnalyzeXML_GenerateXMLString(self, includeChildren, insertNewLines)
    if _newclass:
        DeleteString = staticmethod(_Python_sml_ClientInterface.AnalyzeXML_DeleteString)
    else:
        DeleteString = _Python_sml_ClientInterface.AnalyzeXML_DeleteString

    def GetArgString(self, pArgName: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.AnalyzeXML_GetArgString(self, pArgName)

    def GetArgBool(self, pArgName: 'char const *', defaultValue: 'bool') -> "bool":
        return _Python_sml_ClientInterface.AnalyzeXML_GetArgBool(self, pArgName, defaultValue)

    def GetArgInt(self, *args) -> "int64_t":
        return _Python_sml_ClientInterface.AnalyzeXML_GetArgInt(self, *args)

    def GetArgFloat(self, pArgName: 'char const *', defaultValue: 'double') -> "double":
        return _Python_sml_ClientInterface.AnalyzeXML_GetArgFloat(self, pArgName, defaultValue)
AnalyzeXML_swigregister = _Python_sml_ClientInterface.AnalyzeXML_swigregister
AnalyzeXML_swigregister(AnalyzeXML)

def AnalyzeXML_DeleteString(pString: 'char *') -> "void":
    return _Python_sml_ClientInterface.AnalyzeXML_DeleteString(pString)
AnalyzeXML_DeleteString = _Python_sml_ClientInterface.AnalyzeXML_DeleteString

smlSYSTEM_EVENT_BAD = _Python_sml_ClientInterface.smlSYSTEM_EVENT_BAD
smlEVENT_BEFORE_SHUTDOWN = _Python_sml_ClientInterface.smlEVENT_BEFORE_SHUTDOWN
smlEVENT_AFTER_CONNECTION = _Python_sml_ClientInterface.smlEVENT_AFTER_CONNECTION
smlEVENT_SYSTEM_START = _Python_sml_ClientInterface.smlEVENT_SYSTEM_START
smlEVENT_BEFORE_AGENTS_RUN_STEP = _Python_sml_ClientInterface.smlEVENT_BEFORE_AGENTS_RUN_STEP
smlEVENT_SYSTEM_STOP = _Python_sml_ClientInterface.smlEVENT_SYSTEM_STOP
smlEVENT_INTERRUPT_CHECK = _Python_sml_ClientInterface.smlEVENT_INTERRUPT_CHECK
smlEVENT_SYSTEM_PROPERTY_CHANGED = _Python_sml_ClientInterface.smlEVENT_SYSTEM_PROPERTY_CHANGED
smlEVENT_LAST_SYSTEM_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_SYSTEM_EVENT
smlRUN_EVENT_BAD = _Python_sml_ClientInterface.smlRUN_EVENT_BAD
smlEVENT_BEFORE_SMALLEST_STEP = _Python_sml_ClientInterface.smlEVENT_BEFORE_SMALLEST_STEP
smlEVENT_AFTER_SMALLEST_STEP = _Python_sml_ClientInterface.smlEVENT_AFTER_SMALLEST_STEP
smlEVENT_BEFORE_ELABORATION_CYCLE = _Python_sml_ClientInterface.smlEVENT_BEFORE_ELABORATION_CYCLE
smlEVENT_AFTER_ELABORATION_CYCLE = _Python_sml_ClientInterface.smlEVENT_AFTER_ELABORATION_CYCLE
smlEVENT_BEFORE_PHASE_EXECUTED = _Python_sml_ClientInterface.smlEVENT_BEFORE_PHASE_EXECUTED
smlEVENT_BEFORE_INPUT_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_INPUT_PHASE
smlEVENT_BEFORE_PROPOSE_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_PROPOSE_PHASE
smlEVENT_BEFORE_DECISION_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_DECISION_PHASE
smlEVENT_BEFORE_APPLY_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_APPLY_PHASE
smlEVENT_BEFORE_OUTPUT_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_OUTPUT_PHASE
smlEVENT_BEFORE_PREFERENCE_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_PREFERENCE_PHASE
smlEVENT_BEFORE_WM_PHASE = _Python_sml_ClientInterface.smlEVENT_BEFORE_WM_PHASE
smlEVENT_AFTER_INPUT_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_INPUT_PHASE
smlEVENT_AFTER_PROPOSE_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_PROPOSE_PHASE
smlEVENT_AFTER_DECISION_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_DECISION_PHASE
smlEVENT_AFTER_APPLY_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_APPLY_PHASE
smlEVENT_AFTER_OUTPUT_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_OUTPUT_PHASE
smlEVENT_AFTER_PREFERENCE_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_PREFERENCE_PHASE
smlEVENT_AFTER_WM_PHASE = _Python_sml_ClientInterface.smlEVENT_AFTER_WM_PHASE
smlEVENT_AFTER_PHASE_EXECUTED = _Python_sml_ClientInterface.smlEVENT_AFTER_PHASE_EXECUTED
smlEVENT_BEFORE_DECISION_CYCLE = _Python_sml_ClientInterface.smlEVENT_BEFORE_DECISION_CYCLE
smlEVENT_AFTER_DECISION_CYCLE = _Python_sml_ClientInterface.smlEVENT_AFTER_DECISION_CYCLE
smlEVENT_MAX_MEMORY_USAGE_EXCEEDED = _Python_sml_ClientInterface.smlEVENT_MAX_MEMORY_USAGE_EXCEEDED
smlEVENT_AFTER_INTERRUPT = _Python_sml_ClientInterface.smlEVENT_AFTER_INTERRUPT
smlEVENT_AFTER_HALTED = _Python_sml_ClientInterface.smlEVENT_AFTER_HALTED
smlEVENT_BEFORE_RUN_STARTS = _Python_sml_ClientInterface.smlEVENT_BEFORE_RUN_STARTS
smlEVENT_AFTER_RUN_ENDS = _Python_sml_ClientInterface.smlEVENT_AFTER_RUN_ENDS
smlEVENT_BEFORE_RUNNING = _Python_sml_ClientInterface.smlEVENT_BEFORE_RUNNING
smlEVENT_AFTER_RUNNING = _Python_sml_ClientInterface.smlEVENT_AFTER_RUNNING
smlEVENT_LAST_RUN_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_RUN_EVENT
smlPRODUCTION_EVENT_BAD = _Python_sml_ClientInterface.smlPRODUCTION_EVENT_BAD
smlEVENT_AFTER_PRODUCTION_ADDED = _Python_sml_ClientInterface.smlEVENT_AFTER_PRODUCTION_ADDED
smlEVENT_BEFORE_PRODUCTION_REMOVED = _Python_sml_ClientInterface.smlEVENT_BEFORE_PRODUCTION_REMOVED
smlEVENT_AFTER_PRODUCTION_FIRED = _Python_sml_ClientInterface.smlEVENT_AFTER_PRODUCTION_FIRED
smlEVENT_BEFORE_PRODUCTION_RETRACTED = _Python_sml_ClientInterface.smlEVENT_BEFORE_PRODUCTION_RETRACTED
smlEVENT_LAST_PRODUCTION_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_PRODUCTION_EVENT
smlAGENT_EVENT_BAD = _Python_sml_ClientInterface.smlAGENT_EVENT_BAD
smlEVENT_AFTER_AGENT_CREATED = _Python_sml_ClientInterface.smlEVENT_AFTER_AGENT_CREATED
smlEVENT_BEFORE_AGENT_DESTROYED = _Python_sml_ClientInterface.smlEVENT_BEFORE_AGENT_DESTROYED
smlEVENT_BEFORE_AGENT_REINITIALIZED = _Python_sml_ClientInterface.smlEVENT_BEFORE_AGENT_REINITIALIZED
smlEVENT_AFTER_AGENT_REINITIALIZED = _Python_sml_ClientInterface.smlEVENT_AFTER_AGENT_REINITIALIZED
smlEVENT_LAST_AGENT_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_AGENT_EVENT
smlWORKING_MEMORY_EVENT_BAD = _Python_sml_ClientInterface.smlWORKING_MEMORY_EVENT_BAD
smlEVENT_OUTPUT_PHASE_CALLBACK = _Python_sml_ClientInterface.smlEVENT_OUTPUT_PHASE_CALLBACK
smlEVENT_INPUT_PHASE_CALLBACK = _Python_sml_ClientInterface.smlEVENT_INPUT_PHASE_CALLBACK
smlEVENT_LAST_WM_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_WM_EVENT
smlPRINT_EVENT_BAD = _Python_sml_ClientInterface.smlPRINT_EVENT_BAD
smlEVENT_ECHO = _Python_sml_ClientInterface.smlEVENT_ECHO
smlEVENT_FIRST_PRINT_EVENT = _Python_sml_ClientInterface.smlEVENT_FIRST_PRINT_EVENT
smlEVENT_PRINT = _Python_sml_ClientInterface.smlEVENT_PRINT
smlEVENT_LAST_PRINT_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_PRINT_EVENT
smlEVENT_RHS_USER_FUNCTION = _Python_sml_ClientInterface.smlEVENT_RHS_USER_FUNCTION
smlEVENT_FILTER = _Python_sml_ClientInterface.smlEVENT_FILTER
smlEVENT_CLIENT_MESSAGE = _Python_sml_ClientInterface.smlEVENT_CLIENT_MESSAGE
smlEVENT_LAST_RHS_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_RHS_EVENT
smlXML_EVENT_BAD = _Python_sml_ClientInterface.smlXML_EVENT_BAD
smlEVENT_XML_TRACE_OUTPUT = _Python_sml_ClientInterface.smlEVENT_XML_TRACE_OUTPUT
smlEVENT_XML_INPUT_RECEIVED = _Python_sml_ClientInterface.smlEVENT_XML_INPUT_RECEIVED
smlEVENT_LAST_XML_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_XML_EVENT
smlUPDATE_EVENT_BAD = _Python_sml_ClientInterface.smlUPDATE_EVENT_BAD
smlEVENT_AFTER_ALL_OUTPUT_PHASES = _Python_sml_ClientInterface.smlEVENT_AFTER_ALL_OUTPUT_PHASES
smlEVENT_AFTER_ALL_GENERATED_OUTPUT = _Python_sml_ClientInterface.smlEVENT_AFTER_ALL_GENERATED_OUTPUT
smlEVENT_LAST_UPDATE_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_UPDATE_EVENT
smlSTRING_EVENT_BAD = _Python_sml_ClientInterface.smlSTRING_EVENT_BAD
smlEVENT_TCL_LIBRARY_MESSAGE = _Python_sml_ClientInterface.smlEVENT_TCL_LIBRARY_MESSAGE
smlEVENT_LOAD_LIBRARY = _Python_sml_ClientInterface.smlEVENT_LOAD_LIBRARY
smlEVENT_LAST_STRING_EVENT = _Python_sml_ClientInterface.smlEVENT_LAST_STRING_EVENT
smlEVENT_INVALID_EVENT = _Python_sml_ClientInterface.smlEVENT_INVALID_EVENT
smlEVENT_LAST = _Python_sml_ClientInterface.smlEVENT_LAST

def IsStringEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsStringEventID(id)
IsStringEventID = _Python_sml_ClientInterface.IsStringEventID

def IsSystemEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsSystemEventID(id)
IsSystemEventID = _Python_sml_ClientInterface.IsSystemEventID

def IsRunEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsRunEventID(id)
IsRunEventID = _Python_sml_ClientInterface.IsRunEventID

def IsPhaseEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsPhaseEventID(id)
IsPhaseEventID = _Python_sml_ClientInterface.IsPhaseEventID

def IsBEFOREPhaseEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsBEFOREPhaseEventID(id)
IsBEFOREPhaseEventID = _Python_sml_ClientInterface.IsBEFOREPhaseEventID

def IsAFTERPhaseEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsAFTERPhaseEventID(id)
IsAFTERPhaseEventID = _Python_sml_ClientInterface.IsAFTERPhaseEventID

def IsProductionEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsProductionEventID(id)
IsProductionEventID = _Python_sml_ClientInterface.IsProductionEventID

def IsAgentEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsAgentEventID(id)
IsAgentEventID = _Python_sml_ClientInterface.IsAgentEventID

def IsWorkingMemoryEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsWorkingMemoryEventID(id)
IsWorkingMemoryEventID = _Python_sml_ClientInterface.IsWorkingMemoryEventID

def IsPrintEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsPrintEventID(id)
IsPrintEventID = _Python_sml_ClientInterface.IsPrintEventID

def IsRhsEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsRhsEventID(id)
IsRhsEventID = _Python_sml_ClientInterface.IsRhsEventID

def IsXMLEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsXMLEventID(id)
IsXMLEventID = _Python_sml_ClientInterface.IsXMLEventID

def IsUpdateEventID(id: 'int') -> "bool":
    return _Python_sml_ClientInterface.IsUpdateEventID(id)
IsUpdateEventID = _Python_sml_ClientInterface.IsUpdateEventID
sml_INPUT_PHASE = _Python_sml_ClientInterface.sml_INPUT_PHASE
sml_PROPOSAL_PHASE = _Python_sml_ClientInterface.sml_PROPOSAL_PHASE
sml_DECISION_PHASE = _Python_sml_ClientInterface.sml_DECISION_PHASE
sml_APPLY_PHASE = _Python_sml_ClientInterface.sml_APPLY_PHASE
sml_OUTPUT_PHASE = _Python_sml_ClientInterface.sml_OUTPUT_PHASE
sml_PREFERENCE_PHASE = _Python_sml_ClientInterface.sml_PREFERENCE_PHASE
sml_WM_PHASE = _Python_sml_ClientInterface.sml_WM_PHASE
sml_PHASE = _Python_sml_ClientInterface.sml_PHASE
sml_ELABORATION = _Python_sml_ClientInterface.sml_ELABORATION
sml_DECISION = _Python_sml_ClientInterface.sml_DECISION
sml_UNTIL_OUTPUT = _Python_sml_ClientInterface.sml_UNTIL_OUTPUT
sml_NONE = _Python_sml_ClientInterface.sml_NONE
sml_RUN_SELF = _Python_sml_ClientInterface.sml_RUN_SELF
sml_RUN_ALL = _Python_sml_ClientInterface.sml_RUN_ALL
sml_UPDATE_WORLD = _Python_sml_ClientInterface.sml_UPDATE_WORLD
sml_DONT_UPDATE_WORLD = _Python_sml_ClientInterface.sml_DONT_UPDATE_WORLD
sml_RUN_ERROR = _Python_sml_ClientInterface.sml_RUN_ERROR
sml_RUN_EXECUTING = _Python_sml_ClientInterface.sml_RUN_EXECUTING
sml_RUN_INTERRUPTED = _Python_sml_ClientInterface.sml_RUN_INTERRUPTED
sml_RUN_COMPLETED = _Python_sml_ClientInterface.sml_RUN_COMPLETED
sml_RUN_COMPLETED_AND_INTERRUPTED = _Python_sml_ClientInterface.sml_RUN_COMPLETED_AND_INTERRUPTED
sml_RUN_ERROR_ALREADY_RUNNING = _Python_sml_ClientInterface.sml_RUN_ERROR_ALREADY_RUNNING
sml_RUNSTATE_STOPPED = _Python_sml_ClientInterface.sml_RUNSTATE_STOPPED
sml_RUNSTATE_INTERRUPTED = _Python_sml_ClientInterface.sml_RUNSTATE_INTERRUPTED
sml_RUNSTATE_RUNNING = _Python_sml_ClientInterface.sml_RUNSTATE_RUNNING
sml_RUNSTATE_HALTED = _Python_sml_ClientInterface.sml_RUNSTATE_HALTED
sml_STOP_AFTER_SMALLEST_STEP = _Python_sml_ClientInterface.sml_STOP_AFTER_SMALLEST_STEP
sml_STOP_AFTER_PHASE = _Python_sml_ClientInterface.sml_STOP_AFTER_PHASE
sml_STOP_AFTER_DECISION_CYCLE = _Python_sml_ClientInterface.sml_STOP_AFTER_DECISION_CYCLE
class Events(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Events, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Events, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Python_sml_ClientInterface.new_Events()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ConvertToEvent(self, pStr: 'char const *') -> "int":
        return _Python_sml_ClientInterface.Events_ConvertToEvent(self, pStr)

    def ConvertToString(self, id: 'int') -> "char const *":
        return _Python_sml_ClientInterface.Events_ConvertToString(self, id)
    __swig_destroy__ = _Python_sml_ClientInterface.delete_Events
    __del__ = lambda self: None
Events_swigregister = _Python_sml_ClientInterface.Events_swigregister
Events_swigregister(Events)

class ClientErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientErrors, name)
    __repr__ = _swig_repr

    def HadError(self) -> "bool":
        return _Python_sml_ClientInterface.ClientErrors_HadError(self)

    def GetLastErrorDescription(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientErrors_GetLastErrorDescription(self)
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ClientErrors
    __del__ = lambda self: None

    def __init__(self):
        this = _Python_sml_ClientInterface.new_ClientErrors()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ClientErrors_swigregister = _Python_sml_ClientInterface.ClientErrors_swigregister
ClientErrors_swigregister(ClientErrors)

class EventHandlerPlusData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_EventID"] = _Python_sml_ClientInterface.EventHandlerPlusData_m_EventID_set
    __swig_getmethods__["m_EventID"] = _Python_sml_ClientInterface.EventHandlerPlusData_m_EventID_get
    if _newclass:
        m_EventID = _swig_property(_Python_sml_ClientInterface.EventHandlerPlusData_m_EventID_get, _Python_sml_ClientInterface.EventHandlerPlusData_m_EventID_set)
    __swig_setmethods__["m_UserData"] = _Python_sml_ClientInterface.EventHandlerPlusData_m_UserData_set
    __swig_getmethods__["m_UserData"] = _Python_sml_ClientInterface.EventHandlerPlusData_m_UserData_get
    if _newclass:
        m_UserData = _swig_property(_Python_sml_ClientInterface.EventHandlerPlusData_m_UserData_get, _Python_sml_ClientInterface.EventHandlerPlusData_m_UserData_set)
    __swig_setmethods__["m_CallbackID"] = _Python_sml_ClientInterface.EventHandlerPlusData_m_CallbackID_set
    __swig_getmethods__["m_CallbackID"] = _Python_sml_ClientInterface.EventHandlerPlusData_m_CallbackID_get
    if _newclass:
        m_CallbackID = _swig_property(_Python_sml_ClientInterface.EventHandlerPlusData_m_CallbackID_get, _Python_sml_ClientInterface.EventHandlerPlusData_m_CallbackID_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_EventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getEventID(self) -> "int":
        return _Python_sml_ClientInterface.EventHandlerPlusData_getEventID(self)

    def getUserData(self) -> "void *":
        return _Python_sml_ClientInterface.EventHandlerPlusData_getUserData(self)

    def getCallbackID(self) -> "int":
        return _Python_sml_ClientInterface.EventHandlerPlusData_getCallbackID(self)
    __swig_destroy__ = _Python_sml_ClientInterface.delete_EventHandlerPlusData
    __del__ = lambda self: None
EventHandlerPlusData_swigregister = _Python_sml_ClientInterface.EventHandlerPlusData_swigregister
EventHandlerPlusData_swigregister(EventHandlerPlusData)

class WMElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WMElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WMElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def IsJustAdded(self) -> "bool":
        return _Python_sml_ClientInterface.WMElement_IsJustAdded(self)

    def GetParent(self) -> "sml::IdentifierSymbol *":
        return _Python_sml_ClientInterface.WMElement_GetParent(self)

    def GetIdentifier(self) -> "sml::IdentifierSymbol *":
        return _Python_sml_ClientInterface.WMElement_GetIdentifier(self)

    def GetIdentifierName(self) -> "char const *":
        return _Python_sml_ClientInterface.WMElement_GetIdentifierName(self)

    def GetAttribute(self) -> "char const *":
        return _Python_sml_ClientInterface.WMElement_GetAttribute(self)

    def GetValueType(self) -> "char const *":
        return _Python_sml_ClientInterface.WMElement_GetValueType(self)

    def GetValueAsString(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.WMElement_GetValueAsString(self, *args)

    def GetTimeTag(self) -> "long long":
        return _Python_sml_ClientInterface.WMElement_GetTimeTag(self)

    def IsIdentifier(self) -> "bool":
        return _Python_sml_ClientInterface.WMElement_IsIdentifier(self)

    def ConvertToIdentifier(self) -> "sml::Identifier *":
        return _Python_sml_ClientInterface.WMElement_ConvertToIdentifier(self)

    def ConvertToIntElement(self) -> "sml::IntElement *":
        return _Python_sml_ClientInterface.WMElement_ConvertToIntElement(self)

    def ConvertToFloatElement(self) -> "sml::FloatElement *":
        return _Python_sml_ClientInterface.WMElement_ConvertToFloatElement(self)

    def ConvertToStringElement(self) -> "sml::StringElement *":
        return _Python_sml_ClientInterface.WMElement_ConvertToStringElement(self)

    def GetAgent(self) -> "sml::Agent *":
        return _Python_sml_ClientInterface.WMElement_GetAgent(self)

    def DestroyWME(self) -> "bool":
        return _Python_sml_ClientInterface.WMElement_DestroyWME(self)

    def DebugString(self, result: 'std::string &') -> "void":
        return _Python_sml_ClientInterface.WMElement_DebugString(self, result)
WMElement_swigregister = _Python_sml_ClientInterface.WMElement_swigregister
WMElement_swigregister(WMElement)

class IntElement(WMElement):
    __swig_setmethods__ = {}
    for _s in [WMElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntElement, name, value)
    __swig_getmethods__ = {}
    for _s in [WMElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetValueType(self) -> "char const *":
        return _Python_sml_ClientInterface.IntElement_GetValueType(self)

    def GetValueAsString(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.IntElement_GetValueAsString(self, *args)

    def GetValue(self) -> "long long":
        return _Python_sml_ClientInterface.IntElement_GetValue(self)

    def ConvertToIntElement(self) -> "sml::IntElement *":
        return _Python_sml_ClientInterface.IntElement_ConvertToIntElement(self)

    def Update(self, value: 'long long') -> "void":
        return _Python_sml_ClientInterface.IntElement_Update(self, value)
IntElement_swigregister = _Python_sml_ClientInterface.IntElement_swigregister
IntElement_swigregister(IntElement)

class FloatElement(WMElement):
    __swig_setmethods__ = {}
    for _s in [WMElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatElement, name, value)
    __swig_getmethods__ = {}
    for _s in [WMElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetValueType(self) -> "char const *":
        return _Python_sml_ClientInterface.FloatElement_GetValueType(self)

    def GetValueAsString(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.FloatElement_GetValueAsString(self, *args)

    def GetValue(self) -> "double":
        return _Python_sml_ClientInterface.FloatElement_GetValue(self)

    def ConvertToFloatElement(self) -> "sml::FloatElement *":
        return _Python_sml_ClientInterface.FloatElement_ConvertToFloatElement(self)

    def Update(self, value: 'double') -> "void":
        return _Python_sml_ClientInterface.FloatElement_Update(self, value)
FloatElement_swigregister = _Python_sml_ClientInterface.FloatElement_swigregister
FloatElement_swigregister(FloatElement)

class StringElement(WMElement):
    __swig_setmethods__ = {}
    for _s in [WMElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringElement, name, value)
    __swig_getmethods__ = {}
    for _s in [WMElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetValueType(self) -> "char const *":
        return _Python_sml_ClientInterface.StringElement_GetValueType(self)

    def GetValue(self) -> "char const *":
        return _Python_sml_ClientInterface.StringElement_GetValue(self)

    def GetValueAsString(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.StringElement_GetValueAsString(self, *args)

    def ConvertToStringElement(self) -> "sml::StringElement *":
        return _Python_sml_ClientInterface.StringElement_ConvertToStringElement(self)

    def Update(self, pValue: 'char const *') -> "void":
        return _Python_sml_ClientInterface.StringElement_Update(self, pValue)
StringElement_swigregister = _Python_sml_ClientInterface.StringElement_swigregister
StringElement_swigregister(StringElement)

class IdentifierSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentifierSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdentifierSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, pIdentifier: 'Identifier'):
        this = _Python_sml_ClientInterface.new_IdentifierSymbol(pIdentifier)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_IdentifierSymbol
    __del__ = lambda self: None

    def GetIdentifierSymbol(self) -> "char const *":
        return _Python_sml_ClientInterface.IdentifierSymbol_GetIdentifierSymbol(self)

    def SetIdentifierSymbol(self, pID: 'char const *') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_SetIdentifierSymbol(self, pID)

    def AreChildrenModified(self) -> "bool":
        return _Python_sml_ClientInterface.IdentifierSymbol_AreChildrenModified(self)

    def SetAreChildrenModified(self, state: 'bool') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_SetAreChildrenModified(self, state)

    def NoLongerUsedBy(self, pIdentifier: 'Identifier') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_NoLongerUsedBy(self, pIdentifier)

    def UsedBy(self, pIdentifier: 'Identifier') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_UsedBy(self, pIdentifier)

    def IsFirstUser(self, pIdentifier: 'Identifier') -> "bool":
        return _Python_sml_ClientInterface.IdentifierSymbol_IsFirstUser(self, pIdentifier)

    def GetFirstUser(self) -> "sml::Identifier *":
        return _Python_sml_ClientInterface.IdentifierSymbol_GetFirstUser(self)

    def GetNumberUsing(self) -> "int":
        return _Python_sml_ClientInterface.IdentifierSymbol_GetNumberUsing(self)

    def AddChild(self, pWME: 'WMElement') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_AddChild(self, pWME)

    def GetChildByTimeTag(self, timeTag: 'long long') -> "sml::WMElement *":
        return _Python_sml_ClientInterface.IdentifierSymbol_GetChildByTimeTag(self, timeTag)

    def TransferChildren(self, pDestination: 'IdentifierSymbol') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_TransferChildren(self, pDestination)

    def DeleteAllChildren(self) -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_DeleteAllChildren(self)

    def RemoveChild(self, pWME: 'WMElement') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_RemoveChild(self, pWME)

    def DebugString(self, result: 'std::string &') -> "void":
        return _Python_sml_ClientInterface.IdentifierSymbol_DebugString(self, result)
IdentifierSymbol_swigregister = _Python_sml_ClientInterface.IdentifierSymbol_swigregister
IdentifierSymbol_swigregister(IdentifierSymbol)

class Identifier(WMElement):
    __swig_setmethods__ = {}
    for _s in [WMElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Identifier, name, value)
    __swig_getmethods__ = {}
    for _s in [WMElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Identifier, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetChildrenBegin(self) -> "sml::Identifier::ChildrenIter":
        return _Python_sml_ClientInterface.Identifier_GetChildrenBegin(self)

    def GetChildrenEnd(self) -> "sml::Identifier::ChildrenIter":
        return _Python_sml_ClientInterface.Identifier_GetChildrenEnd(self)

    def GetValueType(self) -> "char const *":
        return _Python_sml_ClientInterface.Identifier_GetValueType(self)

    def GetValueAsString(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.Identifier_GetValueAsString(self, *args)

    def IsIdentifier(self) -> "bool":
        return _Python_sml_ClientInterface.Identifier_IsIdentifier(self)

    def ConvertToIdentifier(self) -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Identifier_ConvertToIdentifier(self)

    def FindFromTimeTag(self, timeTag: 'long long') -> "sml::WMElement *":
        return _Python_sml_ClientInterface.Identifier_FindFromTimeTag(self, timeTag)

    def FindByAttribute(self, pAttribute: 'char const *', index: 'int') -> "sml::WMElement *":
        return _Python_sml_ClientInterface.Identifier_FindByAttribute(self, pAttribute, index)

    def GetParameterValue(self, pAttribute: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.Identifier_GetParameterValue(self, pAttribute)

    def GetCommandName(self) -> "char const *":
        return _Python_sml_ClientInterface.Identifier_GetCommandName(self)

    def AddStatusComplete(self) -> "void":
        return _Python_sml_ClientInterface.Identifier_AddStatusComplete(self)

    def AddStatusError(self) -> "void":
        return _Python_sml_ClientInterface.Identifier_AddStatusError(self)

    def AddErrorCode(self, errorCode: 'int') -> "void":
        return _Python_sml_ClientInterface.Identifier_AddErrorCode(self, errorCode)

    def GetNumberChildren(self) -> "int":
        return _Python_sml_ClientInterface.Identifier_GetNumberChildren(self)

    def GetChild(self, index: 'int') -> "sml::WMElement *":
        return _Python_sml_ClientInterface.Identifier_GetChild(self, index)

    def AreChildrenModified(self) -> "bool":
        return _Python_sml_ClientInterface.Identifier_AreChildrenModified(self)

    def CreateStringWME(self, pAttribute: 'char const *', pValue: 'char const *') -> "sml::StringElement *":
        return _Python_sml_ClientInterface.Identifier_CreateStringWME(self, pAttribute, pValue)

    def CreateIntWME(self, pAttribute: 'char const *', value: 'long long') -> "sml::IntElement *":
        return _Python_sml_ClientInterface.Identifier_CreateIntWME(self, pAttribute, value)

    def CreateFloatWME(self, pAttribute: 'char const *', value: 'double') -> "sml::FloatElement *":
        return _Python_sml_ClientInterface.Identifier_CreateFloatWME(self, pAttribute, value)

    def CreateIdWME(self, pAttribute: 'char const *') -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Identifier_CreateIdWME(self, pAttribute)

    def CreateSharedIdWME(self, pAttribute: 'char const *', pSharedValue: 'Identifier') -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Identifier_CreateSharedIdWME(self, pAttribute, pSharedValue)
Identifier_swigregister = _Python_sml_ClientInterface.Identifier_swigregister
Identifier_swigregister(Identifier)

class SystemEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.SystemEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.SystemEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.SystemEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.SystemEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_SystemEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_SystemEventHandlerPlusData
    __del__ = lambda self: None
SystemEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.SystemEventHandlerPlusData_swigregister
SystemEventHandlerPlusData_swigregister(SystemEventHandlerPlusData)

class UpdateEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.UpdateEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.UpdateEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.UpdateEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.UpdateEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_UpdateEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_UpdateEventHandlerPlusData
    __del__ = lambda self: None
UpdateEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.UpdateEventHandlerPlusData_swigregister
UpdateEventHandlerPlusData_swigregister(UpdateEventHandlerPlusData)

class StringEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.StringEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.StringEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.StringEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.StringEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_StringEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_StringEventHandlerPlusData
    __del__ = lambda self: None
StringEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.StringEventHandlerPlusData_swigregister
StringEventHandlerPlusData_swigregister(StringEventHandlerPlusData)

class AgentEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgentEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.AgentEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.AgentEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.AgentEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.AgentEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_AgentEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_AgentEventHandlerPlusData
    __del__ = lambda self: None
AgentEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.AgentEventHandlerPlusData_swigregister
AgentEventHandlerPlusData_swigregister(AgentEventHandlerPlusData)

class RhsEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RhsEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RhsEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.RhsEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.RhsEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.RhsEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.RhsEventHandlerPlusData_m_Handler_set)
    __swig_setmethods__["m_FunctionName"] = _Python_sml_ClientInterface.RhsEventHandlerPlusData_m_FunctionName_set
    __swig_getmethods__["m_FunctionName"] = _Python_sml_ClientInterface.RhsEventHandlerPlusData_m_FunctionName_get
    if _newclass:
        m_FunctionName = _swig_property(_Python_sml_ClientInterface.RhsEventHandlerPlusData_m_FunctionName_get, _Python_sml_ClientInterface.RhsEventHandlerPlusData_m_FunctionName_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_RhsEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_RhsEventHandlerPlusData
    __del__ = lambda self: None
RhsEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.RhsEventHandlerPlusData_swigregister
RhsEventHandlerPlusData_swigregister(RhsEventHandlerPlusData)

class ConnectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionInfo, name)
    __repr__ = _swig_repr

    def __init__(self, pID: 'char const *', pName: 'char const *', pStatus: 'char const *', pAgentStatus: 'char const *'):
        this = _Python_sml_ClientInterface.new_ConnectionInfo(pID, pName, pStatus, pAgentStatus)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetID(self) -> "char const *":
        return _Python_sml_ClientInterface.ConnectionInfo_GetID(self)

    def GetName(self) -> "char const *":
        return _Python_sml_ClientInterface.ConnectionInfo_GetName(self)

    def GetConnectionStatus(self) -> "char const *":
        return _Python_sml_ClientInterface.ConnectionInfo_GetConnectionStatus(self)

    def GetAgentStatus(self) -> "char const *":
        return _Python_sml_ClientInterface.ConnectionInfo_GetAgentStatus(self)
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ConnectionInfo
    __del__ = lambda self: None
ConnectionInfo_swigregister = _Python_sml_ClientInterface.ConnectionInfo_swigregister
ConnectionInfo_swigregister(ConnectionInfo)

class Kernel(ClientErrors):
    __swig_setmethods__ = {}
    for _s in [ClientErrors]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientErrors]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    kDefaultSMLPort = _Python_sml_ClientInterface.Kernel_kDefaultSMLPort
    kSuppressListener = _Python_sml_ClientInterface.Kernel_kSuppressListener
    kUseAnyPort = _Python_sml_ClientInterface.Kernel_kUseAnyPort
    if _newclass:
        CreateKernelInCurrentThread = staticmethod(_Python_sml_ClientInterface.Kernel_CreateKernelInCurrentThread)
    else:
        CreateKernelInCurrentThread = _Python_sml_ClientInterface.Kernel_CreateKernelInCurrentThread
    if _newclass:
        CreateKernelInNewThread = staticmethod(_Python_sml_ClientInterface.Kernel_CreateKernelInNewThread)
    else:
        CreateKernelInNewThread = _Python_sml_ClientInterface.Kernel_CreateKernelInNewThread

    def GetListenerPort(self) -> "int":
        return _Python_sml_ClientInterface.Kernel_GetListenerPort(self)
    if _newclass:
        CreateRemoteConnection = staticmethod(_Python_sml_ClientInterface.Kernel_CreateRemoteConnection)
    else:
        CreateRemoteConnection = _Python_sml_ClientInterface.Kernel_CreateRemoteConnection
    if _newclass:
        GetDefaultPort = staticmethod(_Python_sml_ClientInterface.Kernel_GetDefaultPort)
    else:
        GetDefaultPort = _Python_sml_ClientInterface.Kernel_GetDefaultPort

    def SetAutoCommit(self, state: 'bool') -> "void":
        return _Python_sml_ClientInterface.Kernel_SetAutoCommit(self, state)

    def IsAutoCommitEnabled(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsAutoCommitEnabled(self)

    def IsConnectionClosed(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsConnectionClosed(self)

    def IsRemoteConnection(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsRemoteConnection(self)

    def IsDirectConnection(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsDirectConnection(self)

    def Shutdown(self) -> "void":
        return _Python_sml_ClientInterface.Kernel_Shutdown(self)
    __swig_destroy__ = _Python_sml_ClientInterface.delete_Kernel
    __del__ = lambda self: None

    def SetTraceCommunications(self, state: 'bool') -> "void":
        return _Python_sml_ClientInterface.Kernel_SetTraceCommunications(self, state)

    def IsTracingCommunications(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsTracingCommunications(self)

    def CreateAgent(self, pAgentName: 'char const *') -> "sml::Agent *":
        return _Python_sml_ClientInterface.Kernel_CreateAgent(self, pAgentName)

    def UpdateAgentList(self) -> "void":
        return _Python_sml_ClientInterface.Kernel_UpdateAgentList(self)

    def GetNumberAgents(self) -> "int":
        return _Python_sml_ClientInterface.Kernel_GetNumberAgents(self)

    def DestroyAgent(self, pAgent: 'Agent') -> "bool":
        return _Python_sml_ClientInterface.Kernel_DestroyAgent(self, pAgent)

    def GetAgent(self, pAgentName: 'char const *') -> "sml::Agent *":
        return _Python_sml_ClientInterface.Kernel_GetAgent(self, pAgentName)

    def GetAgentByIndex(self, index: 'int') -> "sml::Agent *":
        return _Python_sml_ClientInterface.Kernel_GetAgentByIndex(self, index)

    def IsAgentValid(self, pAgent: 'Agent') -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsAgentValid(self, pAgent)

    def EnableFiltering(self, state: 'bool') -> "void":
        return _Python_sml_ClientInterface.Kernel_EnableFiltering(self, state)

    def ExecuteCommandLine(self, pCommandLine: 'char const *', pAgentName: 'char const *', echoResults: 'bool'=False, noFilter: 'bool'=False) -> "char const *":
        return _Python_sml_ClientInterface.Kernel_ExecuteCommandLine(self, pCommandLine, pAgentName, echoResults, noFilter)

    def ExecuteCommandLineXML(self, pCommandLine: 'char const *', pAgentName: 'char const *', pResponse: 'ClientAnalyzedXML') -> "bool":
        return _Python_sml_ClientInterface.Kernel_ExecuteCommandLineXML(self, pCommandLine, pAgentName, pResponse)

    def RunAllAgents(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.Kernel_RunAllAgents(self, *args)

    def RunAllAgentsForever(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.Kernel_RunAllAgentsForever(self, *args)

    def RunAllTilOutput(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.Kernel_RunAllTilOutput(self, *args)

    def StopAllAgents(self) -> "char const *":
        return _Python_sml_ClientInterface.Kernel_StopAllAgents(self)

    def IsSoarRunning(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsSoarRunning(self)

    def GetAllConnectionInfo(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_GetAllConnectionInfo(self)

    def GetNumberConnections(self) -> "int":
        return _Python_sml_ClientInterface.Kernel_GetNumberConnections(self)

    def HasConnectionInfoChanged(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_HasConnectionInfoChanged(self)

    def GetConnectionInfo(self, i: 'int') -> "sml::ConnectionInfo const *":
        return _Python_sml_ClientInterface.Kernel_GetConnectionInfo(self, i)

    def GetConnectionStatus(self, pConnectionName: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.Kernel_GetConnectionStatus(self, pConnectionName)

    def GetAgentStatus(self, pConnectionName: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.Kernel_GetAgentStatus(self, pConnectionName)

    def SetConnectionInfo(self, pName: 'char const *', pConnectionStatus: 'char const *', pAgentStatus: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.Kernel_SetConnectionInfo(self, pName, pConnectionStatus, pAgentStatus)

    def FireStartSystemEvent(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_FireStartSystemEvent(self)

    def FireStopSystemEvent(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_FireStopSystemEvent(self)

    def SuppressSystemStop(self, state: 'bool') -> "bool":
        return _Python_sml_ClientInterface.Kernel_SuppressSystemStop(self, state)

    def GetLastCommandLineResult(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_GetLastCommandLineResult(self)

    def CheckForIncomingCommands(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_CheckForIncomingCommands(self)

    def CheckForIncomingEvents(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_CheckForIncomingEvents(self)

    def StartEventThread(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_StartEventThread(self)

    def StopEventThread(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_StopEventThread(self)

    def SetInterruptCheckRate(self, newRate: 'int') -> "bool":
        return _Python_sml_ClientInterface.Kernel_SetInterruptCheckRate(self, newRate)

    def SendClientMessage(self, pAgent: 'Agent', pClientName: 'char const *', pMessage: 'char const *') -> "std::string":
        return _Python_sml_ClientInterface.Kernel_SendClientMessage(self, pAgent, pClientName, pMessage)

    def GetSoarKernelVersion(self) -> "std::string":
        return _Python_sml_ClientInterface.Kernel_GetSoarKernelVersion(self)

    def CommitAll(self) -> "void":
        return _Python_sml_ClientInterface.Kernel_CommitAll(self)

    def IsCommitRequired(self) -> "bool":
        return _Python_sml_ClientInterface.Kernel_IsCommitRequired(self)

    def LoadExternalLibrary(self, pLibraryCommand: 'char const *') -> "std::string":
        return _Python_sml_ClientInterface.Kernel_LoadExternalLibrary(self, pLibraryCommand)

    def GetConnection(self) -> "sml::Connection *":
        return _Python_sml_ClientInterface.Kernel_GetConnection(self)

    def RegisterForSystemEvent(self, id: 'sml::smlSystemEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Kernel_RegisterForSystemEvent(self, id, func, userData, addToBack)

    def RegisterForUpdateEvent(self, id: 'sml::smlUpdateEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Kernel_RegisterForUpdateEvent(self, id, func, userData, addToBack)

    def RegisterForStringEvent(self, id: 'sml::smlStringEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Kernel_RegisterForStringEvent(self, id, func, userData, addToBack)

    def RegisterForAgentEvent(self, id: 'sml::smlAgentEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Kernel_RegisterForAgentEvent(self, id, func, userData, addToBack)

    def AddRhsFunction(self, pRhsFunctionName: 'char const *', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Kernel_AddRhsFunction(self, pRhsFunctionName, func, userData, addToBack)

    def RegisterForClientMessageEvent(self, *args) -> "long":
        return _Python_sml_ClientInterface.Kernel_RegisterForClientMessageEvent(self, *args)

    def UnregisterForSystemEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Kernel_UnregisterForSystemEvent(self, id)

    def UnregisterForUpdateEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Kernel_UnregisterForUpdateEvent(self, id)

    def UnregisterForStringEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Kernel_UnregisterForStringEvent(self, id)

    def UnregisterForAgentEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Kernel_UnregisterForAgentEvent(self, id)

    def RemoveRhsFunction(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Kernel_RemoveRhsFunction(self, id)

    def UnregisterForClientMessageEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Kernel_UnregisterForClientMessageEvent(self, id)
Kernel_swigregister = _Python_sml_ClientInterface.Kernel_swigregister
Kernel_swigregister(Kernel)

def Kernel_CreateKernelInCurrentThread(*args) -> "sml::Kernel *":
    return _Python_sml_ClientInterface.Kernel_CreateKernelInCurrentThread(*args)
Kernel_CreateKernelInCurrentThread = _Python_sml_ClientInterface.Kernel_CreateKernelInCurrentThread

def Kernel_CreateKernelInNewThread(*args) -> "sml::Kernel *":
    return _Python_sml_ClientInterface.Kernel_CreateKernelInNewThread(*args)
Kernel_CreateKernelInNewThread = _Python_sml_ClientInterface.Kernel_CreateKernelInNewThread

def Kernel_CreateRemoteConnection(*args) -> "sml::Kernel *":
    return _Python_sml_ClientInterface.Kernel_CreateRemoteConnection(*args)
Kernel_CreateRemoteConnection = _Python_sml_ClientInterface.Kernel_CreateRemoteConnection

def Kernel_GetDefaultPort() -> "int":
    return _Python_sml_ClientInterface.Kernel_GetDefaultPort()
Kernel_GetDefaultPort = _Python_sml_ClientInterface.Kernel_GetDefaultPort


def get_soarlib_path() -> "std::string":
    return _Python_sml_ClientInterface.get_soarlib_path()
get_soarlib_path = _Python_sml_ClientInterface.get_soarlib_path
class RunEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RunEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.RunEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.RunEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.RunEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.RunEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_RunEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_RunEventHandlerPlusData
    __del__ = lambda self: None
RunEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.RunEventHandlerPlusData_swigregister
RunEventHandlerPlusData_swigregister(RunEventHandlerPlusData)

class ProductionEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProductionEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProductionEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.ProductionEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.ProductionEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.ProductionEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.ProductionEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_ProductionEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ProductionEventHandlerPlusData
    __del__ = lambda self: None
ProductionEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.ProductionEventHandlerPlusData_swigregister
ProductionEventHandlerPlusData_swigregister(ProductionEventHandlerPlusData)

class PrintEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrintEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.PrintEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.PrintEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.PrintEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.PrintEventHandlerPlusData_m_Handler_set)
    __swig_setmethods__["m_IgnoreOwnEchos"] = _Python_sml_ClientInterface.PrintEventHandlerPlusData_m_IgnoreOwnEchos_set
    __swig_getmethods__["m_IgnoreOwnEchos"] = _Python_sml_ClientInterface.PrintEventHandlerPlusData_m_IgnoreOwnEchos_get
    if _newclass:
        m_IgnoreOwnEchos = _swig_property(_Python_sml_ClientInterface.PrintEventHandlerPlusData_m_IgnoreOwnEchos_get, _Python_sml_ClientInterface.PrintEventHandlerPlusData_m_IgnoreOwnEchos_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_PrintEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_PrintEventHandlerPlusData
    __del__ = lambda self: None
PrintEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.PrintEventHandlerPlusData_swigregister
PrintEventHandlerPlusData_swigregister(PrintEventHandlerPlusData)

class XMLEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.XMLEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.XMLEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.XMLEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.XMLEventHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_XMLEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_XMLEventHandlerPlusData
    __del__ = lambda self: None
XMLEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.XMLEventHandlerPlusData_swigregister
XMLEventHandlerPlusData_swigregister(XMLEventHandlerPlusData)

class OutputEventHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputEventHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputEventHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.OutputEventHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.OutputEventHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.OutputEventHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.OutputEventHandlerPlusData_m_Handler_set)
    __swig_setmethods__["m_AttributeName"] = _Python_sml_ClientInterface.OutputEventHandlerPlusData_m_AttributeName_set
    __swig_getmethods__["m_AttributeName"] = _Python_sml_ClientInterface.OutputEventHandlerPlusData_m_AttributeName_get
    if _newclass:
        m_AttributeName = _swig_property(_Python_sml_ClientInterface.OutputEventHandlerPlusData_m_AttributeName_get, _Python_sml_ClientInterface.OutputEventHandlerPlusData_m_AttributeName_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_OutputEventHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_OutputEventHandlerPlusData
    __del__ = lambda self: None
OutputEventHandlerPlusData_swigregister = _Python_sml_ClientInterface.OutputEventHandlerPlusData_swigregister
OutputEventHandlerPlusData_swigregister(OutputEventHandlerPlusData)

class OutputNotificationHandlerPlusData(EventHandlerPlusData):
    __swig_setmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNotificationHandlerPlusData, name, value)
    __swig_getmethods__ = {}
    for _s in [EventHandlerPlusData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNotificationHandlerPlusData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_Handler"] = _Python_sml_ClientInterface.OutputNotificationHandlerPlusData_m_Handler_set
    __swig_getmethods__["m_Handler"] = _Python_sml_ClientInterface.OutputNotificationHandlerPlusData_m_Handler_get
    if _newclass:
        m_Handler = _swig_property(_Python_sml_ClientInterface.OutputNotificationHandlerPlusData_m_Handler_get, _Python_sml_ClientInterface.OutputNotificationHandlerPlusData_m_Handler_set)

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_OutputNotificationHandlerPlusData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_OutputNotificationHandlerPlusData
    __del__ = lambda self: None
OutputNotificationHandlerPlusData_swigregister = _Python_sml_ClientInterface.OutputNotificationHandlerPlusData_swigregister
OutputNotificationHandlerPlusData_swigregister(OutputNotificationHandlerPlusData)

class Agent(ClientErrors):
    __swig_setmethods__ = {}
    for _s in [ClientErrors]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientErrors]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetAgentName(self) -> "char const *":
        return _Python_sml_ClientInterface.Agent_GetAgentName(self)

    def GetKernel(self) -> "sml::Kernel *":
        return _Python_sml_ClientInterface.Agent_GetKernel(self)

    def LoadProductions(self, pFilename: 'char const *', echoResults: 'bool'=True) -> "bool":
        return _Python_sml_ClientInterface.Agent_LoadProductions(self, pFilename, echoResults)

    def GetInputLink(self) -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Agent_GetInputLink(self)

    def GetILink(self) -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Agent_GetILink(self)

    def GetOutputLink(self) -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Agent_GetOutputLink(self)

    def CreateStringWME(self, parent: 'Identifier', pAttribute: 'char const *', pValue: 'char const *') -> "sml::StringElement *":
        return _Python_sml_ClientInterface.Agent_CreateStringWME(self, parent, pAttribute, pValue)

    def CreateIntWME(self, parent: 'Identifier', pAttribute: 'char const *', value: 'long long') -> "sml::IntElement *":
        return _Python_sml_ClientInterface.Agent_CreateIntWME(self, parent, pAttribute, value)

    def CreateFloatWME(self, parent: 'Identifier', pAttribute: 'char const *', value: 'double') -> "sml::FloatElement *":
        return _Python_sml_ClientInterface.Agent_CreateFloatWME(self, parent, pAttribute, value)

    def CreateIdWME(self, parent: 'Identifier', pAttribute: 'char const *') -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Agent_CreateIdWME(self, parent, pAttribute)

    def CreateSharedIdWME(self, parent: 'Identifier', pAttribute: 'char const *', pSharedValue: 'Identifier') -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Agent_CreateSharedIdWME(self, parent, pAttribute, pSharedValue)

    def Update(self, *args) -> "void":
        return _Python_sml_ClientInterface.Agent_Update(self, *args)

    def SetBlinkIfNoChange(self, state: 'bool') -> "void":
        return _Python_sml_ClientInterface.Agent_SetBlinkIfNoChange(self, state)

    def IsBlinkIfNoChange(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_IsBlinkIfNoChange(self)

    def DestroyWME(self, pWME: 'WMElement') -> "bool":
        return _Python_sml_ClientInterface.Agent_DestroyWME(self, pWME)

    def InitSoar(self) -> "char const *":
        return _Python_sml_ClientInterface.Agent_InitSoar(self)

    def SetOutputLinkChangeTracking(self, setting: 'bool') -> "void":
        return _Python_sml_ClientInterface.Agent_SetOutputLinkChangeTracking(self, setting)

    def GetNumberOutputLinkChanges(self) -> "int":
        return _Python_sml_ClientInterface.Agent_GetNumberOutputLinkChanges(self)

    def GetOutputLinkChange(self, index: 'int') -> "sml::WMElement *":
        return _Python_sml_ClientInterface.Agent_GetOutputLinkChange(self, index)

    def IsOutputLinkChangeAdd(self, index: 'int') -> "bool":
        return _Python_sml_ClientInterface.Agent_IsOutputLinkChangeAdd(self, index)

    def ClearOutputLinkChanges(self) -> "void":
        return _Python_sml_ClientInterface.Agent_ClearOutputLinkChanges(self)

    def GetNumberCommands(self) -> "int":
        return _Python_sml_ClientInterface.Agent_GetNumberCommands(self)

    def Commands(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_Commands(self)

    def GetCommand(self, index: 'int') -> "sml::Identifier *":
        return _Python_sml_ClientInterface.Agent_GetCommand(self, index)

    def Commit(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_Commit(self)

    def IsCommitRequired(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_IsCommitRequired(self)

    def RunSelf(self, *args) -> "char const *":
        return _Python_sml_ClientInterface.Agent_RunSelf(self, *args)

    def RunSelfForever(self) -> "char const *":
        return _Python_sml_ClientInterface.Agent_RunSelfForever(self)

    def RunSelfTilOutput(self) -> "char const *":
        return _Python_sml_ClientInterface.Agent_RunSelfTilOutput(self)

    def WasAgentOnRunList(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_WasAgentOnRunList(self)

    def GetResultOfLastRun(self) -> "sml::smlRunResult":
        return _Python_sml_ClientInterface.Agent_GetResultOfLastRun(self)

    def StopSelf(self) -> "char const *":
        return _Python_sml_ClientInterface.Agent_StopSelf(self)

    def Refresh(self) -> "void":
        return _Python_sml_ClientInterface.Agent_Refresh(self)

    def GetCurrentPhase(self) -> "sml::smlPhase":
        return _Python_sml_ClientInterface.Agent_GetCurrentPhase(self)

    def GetDecisionCycleCounter(self) -> "int":
        return _Python_sml_ClientInterface.Agent_GetDecisionCycleCounter(self)

    def GetRunState(self) -> "sml::smlRunState":
        return _Python_sml_ClientInterface.Agent_GetRunState(self)

    def ExecuteCommandLine(self, pCommandLine: 'char const *', echoResults: 'bool'=False, noFilter: 'bool'=False) -> "char const *":
        return _Python_sml_ClientInterface.Agent_ExecuteCommandLine(self, pCommandLine, echoResults, noFilter)

    def ExecuteCommandLineXML(self, pCommandLine: 'char const *', pResponse: 'ClientAnalyzedXML') -> "bool":
        return _Python_sml_ClientInterface.Agent_ExecuteCommandLineXML(self, pCommandLine, pResponse)

    def SendSVSInput(self, txt: 'std::string const &') -> "void":
        return _Python_sml_ClientInterface.Agent_SendSVSInput(self, txt)

    def GetSVSOutput(self) -> "std::string":
        return _Python_sml_ClientInterface.Agent_GetSVSOutput(self)

    def SVSQuery(self, q: 'std::string const &') -> "std::string":
        return _Python_sml_ClientInterface.Agent_SVSQuery(self, q)

    def GetLastCommandLineResult(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_GetLastCommandLineResult(self)

    def IsProductionLoaded(self, pProductionName: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.Agent_IsProductionLoaded(self, pProductionName)

    def SynchronizeInputLink(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_SynchronizeInputLink(self)

    def SynchronizeOutputLink(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_SynchronizeOutputLink(self)

    def SpawnDebugger(self, port: 'int'=-1, jarpath: 'char const *'=None) -> "bool":
        return _Python_sml_ClientInterface.Agent_SpawnDebugger(self, port, jarpath)

    def KillDebugger(self) -> "bool":
        return _Python_sml_ClientInterface.Agent_KillDebugger(self)

    def ConvertIdentifier(self, pClientIdentifier: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.Agent_ConvertIdentifier(self, pClientIdentifier)

    def RegisterForRunEvent(self, id: 'sml::smlRunEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Agent_RegisterForRunEvent(self, id, func, userData, addToBack)

    def RegisterForProductionEvent(self, id: 'sml::smlProductionEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Agent_RegisterForProductionEvent(self, id, func, userData, addToBack)

    def RegisterForPrintEvent(self, id: 'sml::smlPrintEventId', func: 'PyObject *', userData: 'PyObject *', ignoreOwnEchos: 'bool'=True, addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Agent_RegisterForPrintEvent(self, id, func, userData, ignoreOwnEchos, addToBack)

    def RegisterForXMLEvent(self, id: 'sml::smlXMLEventId', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Agent_RegisterForXMLEvent(self, id, func, userData, addToBack)

    def AddOutputHandler(self, attributeName: 'char *', func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Agent_AddOutputHandler(self, attributeName, func, userData, addToBack)

    def RegisterForOutputNotification(self, func: 'PyObject *', userData: 'PyObject *', addToBack: 'bool'=True) -> "long":
        return _Python_sml_ClientInterface.Agent_RegisterForOutputNotification(self, func, userData, addToBack)

    def UnregisterForRunEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Agent_UnregisterForRunEvent(self, id)

    def UnregisterForProductionEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Agent_UnregisterForProductionEvent(self, id)

    def UnregisterForPrintEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Agent_UnregisterForPrintEvent(self, id)

    def UnregisterForXMLEvent(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Agent_UnregisterForXMLEvent(self, id)

    def UnregisterForOutputNotification(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Agent_UnregisterForOutputNotification(self, id)

    def RemoveOutputHandler(self, id: 'long') -> "bool":
        return _Python_sml_ClientInterface.Agent_RemoveOutputHandler(self, id)
Agent_swigregister = _Python_sml_ClientInterface.Agent_swigregister
Agent_swigregister(Agent)

class ClientXML(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientXML, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientXML, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ClientXML
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _Python_sml_ClientInterface.new_ClientXML(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ConvertToTraceXML(self) -> "sml::ClientTraceXML *":
        return _Python_sml_ClientInterface.ClientXML_ConvertToTraceXML(self)

    def GetTagName(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientXML_GetTagName(self)

    def IsTag(self, pTagName: 'char const *') -> "bool":
        return _Python_sml_ClientInterface.ClientXML_IsTag(self, pTagName)

    def GetNumberChildren(self) -> "int":
        return _Python_sml_ClientInterface.ClientXML_GetNumberChildren(self)

    def GetChild(self, pChild: 'ClientXML', index: 'int') -> "bool":
        return _Python_sml_ClientInterface.ClientXML_GetChild(self, pChild, index)

    def GetNumberAttributes(self) -> "int":
        return _Python_sml_ClientInterface.ClientXML_GetNumberAttributes(self)

    def GetAttributeName(self, index: 'int') -> "char const *":
        return _Python_sml_ClientInterface.ClientXML_GetAttributeName(self, index)

    def GetAttributeValue(self, index: 'int') -> "char const *":
        return _Python_sml_ClientInterface.ClientXML_GetAttributeValue(self, index)

    def GetAttribute(self, attName: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.ClientXML_GetAttribute(self, attName)

    def GetCharacterData(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientXML_GetCharacterData(self)

    def IsCharacterDataBinary(self) -> "bool":
        return _Python_sml_ClientInterface.ClientXML_IsCharacterDataBinary(self)

    def ConvertCharacterDataToBinary(self) -> "bool":
        return _Python_sml_ClientInterface.ClientXML_ConvertCharacterDataToBinary(self)

    def GetCharacterDataLength(self) -> "int":
        return _Python_sml_ClientInterface.ClientXML_GetCharacterDataLength(self)

    def GenerateXMLString(self, includeChildren: 'bool', insertNewLines: 'bool'=False) -> "char *":
        return _Python_sml_ClientInterface.ClientXML_GenerateXMLString(self, includeChildren, insertNewLines)

    def DetermineXMLStringLength(self, includeChildren: 'bool', insertNewLines: 'bool'=False) -> "int":
        return _Python_sml_ClientInterface.ClientXML_DetermineXMLStringLength(self, includeChildren, insertNewLines)
    if _newclass:
        AllocateString = staticmethod(_Python_sml_ClientInterface.ClientXML_AllocateString)
    else:
        AllocateString = _Python_sml_ClientInterface.ClientXML_AllocateString
    if _newclass:
        DeleteString = staticmethod(_Python_sml_ClientInterface.ClientXML_DeleteString)
    else:
        DeleteString = _Python_sml_ClientInterface.ClientXML_DeleteString
    if _newclass:
        CopyString = staticmethod(_Python_sml_ClientInterface.ClientXML_CopyString)
    else:
        CopyString = _Python_sml_ClientInterface.ClientXML_CopyString
    if _newclass:
        CopyBuffer = staticmethod(_Python_sml_ClientInterface.ClientXML_CopyBuffer)
    else:
        CopyBuffer = _Python_sml_ClientInterface.ClientXML_CopyBuffer
ClientXML_swigregister = _Python_sml_ClientInterface.ClientXML_swigregister
ClientXML_swigregister(ClientXML)

def ClientXML_AllocateString(length: 'int') -> "char *":
    return _Python_sml_ClientInterface.ClientXML_AllocateString(length)
ClientXML_AllocateString = _Python_sml_ClientInterface.ClientXML_AllocateString

def ClientXML_DeleteString(pString: 'char *') -> "void":
    return _Python_sml_ClientInterface.ClientXML_DeleteString(pString)
ClientXML_DeleteString = _Python_sml_ClientInterface.ClientXML_DeleteString

def ClientXML_CopyString(original: 'char const *') -> "char *":
    return _Python_sml_ClientInterface.ClientXML_CopyString(original)
ClientXML_CopyString = _Python_sml_ClientInterface.ClientXML_CopyString

def ClientXML_CopyBuffer(original: 'char const *', length: 'int') -> "char *":
    return _Python_sml_ClientInterface.ClientXML_CopyBuffer(original, length)
ClientXML_CopyBuffer = _Python_sml_ClientInterface.ClientXML_CopyBuffer

class ClientTraceXML(ClientXML):
    __swig_setmethods__ = {}
    for _s in [ClientXML]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientTraceXML, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientXML]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClientTraceXML, name)
    __repr__ = _swig_repr

    def IsTagTrace(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagTrace(self)

    def IsTagRhsWrite(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagRhsWrite(self)

    def GetString(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetString(self)

    def IsTagState(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagState(self)

    def GetDecisionCycleCount(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetDecisionCycleCount(self)

    def GetStateID(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetStateID(self)

    def GetImpasseObject(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetImpasseObject(self)

    def GetImpasseType(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetImpasseType(self)

    def GetStackLevel(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetStackLevel(self)

    def IsTagOperator(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagOperator(self)

    def GetOperatorID(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetOperatorID(self)

    def GetOperatorName(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetOperatorName(self)

    def IsTagPhase(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagPhase(self)

    def GetPhaseName(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPhaseName(self)

    def GetPhaseStatus(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPhaseStatus(self)

    def GetFiringType(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetFiringType(self)

    def GetLevelNum(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetLevelNum(self)

    def IsTagSubphase(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagSubphase(self)

    def IsSubphaseNameFiringProductions(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsSubphaseNameFiringProductions(self)

    def IsSubphaseNameChangingWorkingMemory(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsSubphaseNameChangingWorkingMemory(self)

    def IsTagFiringProduction(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagFiringProduction(self)

    def IsTagRetractingProduction(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagRetractingProduction(self)

    def IsTagLearning(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagLearning(self)

    def IsTagProduction(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagProduction(self)

    def GetProductionName(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetProductionName(self)

    def GetProductionDoc(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetProductionDoc(self)

    def GetProductionType(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetProductionType(self)

    def GetProductionDeclaredSupport(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetProductionDeclaredSupport(self)

    def IsTagConditions(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagConditions(self)

    def IsTagCondition(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagCondition(self)

    def IsTagConjunctiveNegationCondition(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagConjunctiveNegationCondition(self)

    def IsTagActions(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagActions(self)

    def IsTagAction(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagAction(self)

    def GetConditionTest(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetConditionTest(self)

    def GetConditionId(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetConditionId(self)

    def GetCondition(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetCondition(self)

    def GetActionId(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetActionId(self)

    def GetAction(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetAction(self)

    def GetFunction(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetFunction(self)

    def IsTagAddWme(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagAddWme(self)

    def IsTagRemoveWme(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagRemoveWme(self)

    def IsTagWme(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagWme(self)

    def GetWmeID(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetWmeID(self)

    def GetWmeAttribute(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetWmeAttribute(self)

    def GetWmeValue(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetWmeValue(self)

    def GetWmeTimeTag(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetWmeTimeTag(self)

    def GetWmePreference(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetWmePreference(self)

    def IsTagPreference(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagPreference(self)

    def GetPreferenceID(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceID(self)

    def GetPreferenceAttribute(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceAttribute(self)

    def GetPreferenceValue(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceValue(self)

    def GetPreferenceType(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceType(self)

    def GetPreferenceTimeTag(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceTimeTag(self)

    def GetPreferenceOSupported(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceOSupported(self)

    def GetPreferenceReferent(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetPreferenceReferent(self)

    def IsTagActionSideMarker(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagActionSideMarker(self)

    def IsTagLocal(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagLocal(self)

    def IsTagLocals(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagLocals(self)

    def IsTagGrounds(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagGrounds(self)

    def IsTagNegated(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagNegated(self)

    def IsTagBacktrace(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagBacktrace(self)

    def IsTagOSKPreference(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagOSKPreference(self)

    def IsTagBacktraceResult(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagBacktraceResult(self)

    def IsTagLocalNegation(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagLocalNegation(self)

    def GetBacktraceAlreadyBacktraced(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetBacktraceAlreadyBacktraced(self)

    def GetBacktraceSymbol1(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetBacktraceSymbol1(self)

    def GetBacktraceSymbol2(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetBacktraceSymbol2(self)

    def IsTagCandidate(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagCandidate(self)

    def GetCandidateName(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetCandidateName(self)

    def GetCandidateType(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetCandidateType(self)

    def GetCandidateValue(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetCandidateValue(self)

    def GetCandidateExpValue(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientTraceXML_GetCandidateExpValue(self)

    def IsTagError(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagError(self)

    def IsTagWarning(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagWarning(self)

    def IsTagMessage(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagMessage(self)

    def IsTagVerbose(self) -> "bool":
        return _Python_sml_ClientInterface.ClientTraceXML_IsTagVerbose(self)

    def __init__(self):
        this = _Python_sml_ClientInterface.new_ClientTraceXML()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ClientTraceXML
    __del__ = lambda self: None
ClientTraceXML_swigregister = _Python_sml_ClientInterface.ClientTraceXML_swigregister
ClientTraceXML_swigregister(ClientTraceXML)

class ClientAnalyzedXML(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientAnalyzedXML, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientAnalyzedXML, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Python_sml_ClientInterface.new_ClientAnalyzedXML()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_ClientAnalyzedXML
    __del__ = lambda self: None

    def Attach(self, pAnalyzeXML: 'AnalyzeXML') -> "void":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_Attach(self, pAnalyzeXML)

    def GetCommandTag(self) -> "soarxml::ElementXML const *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetCommandTag(self)

    def GetResultTag(self) -> "soarxml::ElementXML const *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetResultTag(self)

    def GetErrorTag(self) -> "soarxml::ElementXML const *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetErrorTag(self)

    def IsSML(self) -> "bool":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_IsSML(self)

    def GetCommandName(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetCommandName(self)

    def GetResultString(self) -> "char const *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetResultString(self)

    def GetResultInt(self, *args) -> "long long":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetResultInt(self, *args)

    def GetResultBool(self, defaultValue: 'bool') -> "bool":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetResultBool(self, defaultValue)

    def GetResultFloat(self, defaultValue: 'double') -> "double":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetResultFloat(self, defaultValue)

    def GenerateXMLString(self, includeChildren: 'bool', insertNewLines: 'bool'=False) -> "char *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GenerateXMLString(self, includeChildren, insertNewLines)
    if _newclass:
        DeleteString = staticmethod(_Python_sml_ClientInterface.ClientAnalyzedXML_DeleteString)
    else:
        DeleteString = _Python_sml_ClientInterface.ClientAnalyzedXML_DeleteString

    def GetArgString(self, pArgName: 'char const *') -> "char const *":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetArgString(self, pArgName)

    def GetArgBool(self, pArgName: 'char const *', defaultValue: 'bool') -> "bool":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetArgBool(self, pArgName, defaultValue)

    def GetArgInt(self, *args) -> "long long":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetArgInt(self, *args)

    def GetArgFloat(self, pArgName: 'char const *', defaultValue: 'double') -> "double":
        return _Python_sml_ClientInterface.ClientAnalyzedXML_GetArgFloat(self, pArgName, defaultValue)
ClientAnalyzedXML_swigregister = _Python_sml_ClientInterface.ClientAnalyzedXML_swigregister
ClientAnalyzedXML_swigregister(ClientAnalyzedXML)

def ClientAnalyzedXML_DeleteString(pString: 'char *') -> "void":
    return _Python_sml_ClientInterface.ClientAnalyzedXML_DeleteString(pString)
ClientAnalyzedXML_DeleteString = _Python_sml_ClientInterface.ClientAnalyzedXML_DeleteString

class Soar_Loaded_Library(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Soar_Loaded_Library, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Soar_Loaded_Library, name)
    __repr__ = _swig_repr
    __swig_setmethods__["libMessageFunction"] = _Python_sml_ClientInterface.Soar_Loaded_Library_libMessageFunction_set
    __swig_getmethods__["libMessageFunction"] = _Python_sml_ClientInterface.Soar_Loaded_Library_libMessageFunction_get
    if _newclass:
        libMessageFunction = _swig_property(_Python_sml_ClientInterface.Soar_Loaded_Library_libMessageFunction_get, _Python_sml_ClientInterface.Soar_Loaded_Library_libMessageFunction_set)
    __swig_setmethods__["isOn"] = _Python_sml_ClientInterface.Soar_Loaded_Library_isOn_set
    __swig_getmethods__["isOn"] = _Python_sml_ClientInterface.Soar_Loaded_Library_isOn_get
    if _newclass:
        isOn = _swig_property(_Python_sml_ClientInterface.Soar_Loaded_Library_isOn_get, _Python_sml_ClientInterface.Soar_Loaded_Library_isOn_set)

    def __init__(self):
        this = _Python_sml_ClientInterface.new_Soar_Loaded_Library()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Python_sml_ClientInterface.delete_Soar_Loaded_Library
    __del__ = lambda self: None
Soar_Loaded_Library_swigregister = _Python_sml_ClientInterface.Soar_Loaded_Library_swigregister
Soar_Loaded_Library_swigregister(Soar_Loaded_Library)

class Soar_Instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Soar_Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Soar_Instance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Get_Soar_Instance = staticmethod(_Python_sml_ClientInterface.Soar_Instance_Get_Soar_Instance)
    else:
        Get_Soar_Instance = _Python_sml_ClientInterface.Soar_Instance_Get_Soar_Instance
    __swig_destroy__ = _Python_sml_ClientInterface.delete_Soar_Instance
    __del__ = lambda self: None

    def init_Soar_Instance(self, pKernel: 'Kernel') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_init_Soar_Instance(self, pKernel)

    def Register_Library(self, pKernel: 'Kernel', pLibName: 'char const *', pMessageFunction: 'MessageFunction') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_Register_Library(self, pKernel, pLibName, pMessageFunction)

    def Tcl_Message_Library(self, pMessage: 'char const *') -> "std::string":
        return _Python_sml_ClientInterface.Soar_Instance_Tcl_Message_Library(self, pMessage)

    def is_Tcl_on(self) -> "bool":
        return _Python_sml_ClientInterface.Soar_Instance_is_Tcl_on(self)

    def Message_Library(self, pMessage: 'std::string &') -> "std::string":
        return _Python_sml_ClientInterface.Soar_Instance_Message_Library(self, pMessage)

    def Register_Soar_AgentSML(self, pAgentName: 'char *', pSoarAgentSML: 'sml::AgentSML *') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_Register_Soar_AgentSML(self, pAgentName, pSoarAgentSML)

    def Delete_Agent(self, pAgentName: 'char *') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_Delete_Agent(self, pAgentName)

    def Get_Agent_Info(self, pAgentName: 'char const *') -> "sml::AgentSML *":
        return _Python_sml_ClientInterface.Soar_Instance_Get_Agent_Info(self, pAgentName)

    def CLI_Debug_Print(self, text: 'char const *') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_CLI_Debug_Print(self, text)

    def configure_for_unit_tests(self) -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_configure_for_unit_tests(self)

    def was_run_from_unit_test(self) -> "bool":
        return _Python_sml_ClientInterface.Soar_Instance_was_run_from_unit_test(self)

    def Set_Kernel(self, pKernel: 'Kernel') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_Set_Kernel(self, pKernel)

    def Set_OM(self, pOutput_Manager: 'Output_Manager *') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_Set_OM(self, pOutput_Manager)

    def Set_CLI(self, pCLI: 'cli::CommandLineInterface *') -> "void":
        return _Python_sml_ClientInterface.Soar_Instance_Set_CLI(self, pCLI)

    def Get_Kernel(self) -> "sml::Kernel *":
        return _Python_sml_ClientInterface.Soar_Instance_Get_Kernel(self)

    def Get_OM(self) -> "Output_Manager *":
        return _Python_sml_ClientInterface.Soar_Instance_Get_OM(self)

    def Get_CLI(self) -> "cli::CommandLineInterface *":
        return _Python_sml_ClientInterface.Soar_Instance_Get_CLI(self)
Soar_Instance_swigregister = _Python_sml_ClientInterface.Soar_Instance_swigregister
Soar_Instance_swigregister(Soar_Instance)

def Soar_Instance_Get_Soar_Instance() -> "Soar_Instance &":
    return _Python_sml_ClientInterface.Soar_Instance_Get_Soar_Instance()
Soar_Instance_Get_Soar_Instance = _Python_sml_ClientInterface.Soar_Instance_Get_Soar_Instance


def getSoarInstance() -> "Soar_Instance *":
    return _Python_sml_ClientInterface.getSoarInstance()
getSoarInstance = _Python_sml_ClientInterface.getSoarInstance

def getOM() -> "Output_Manager *":
    return _Python_sml_ClientInterface.getOM()
getOM = _Python_sml_ClientInterface.getOM

def configure_for_unit_tests() -> "void":
    return _Python_sml_ClientInterface.configure_for_unit_tests()
configure_for_unit_tests = _Python_sml_ClientInterface.configure_for_unit_tests

def configure_agent_for_unit_tests(testAgent: 'agent *') -> "void":
    return _Python_sml_ClientInterface.configure_agent_for_unit_tests(testAgent)
configure_agent_for_unit_tests = _Python_sml_ClientInterface.configure_agent_for_unit_tests
# This file is compatible with both classic and new-style classes.


