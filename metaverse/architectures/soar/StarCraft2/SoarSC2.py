from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

#import cmuactr as actr
import math
import numbers
from os import environ as env
import sys
import gym
import threading
import queue

import argparse
import numpy as np

__description__ = 'Run a scripted example using the SC2MoveToBeacon-v0 environment.'

import Python_sml_ClientInterface as sml

import copy
import time
import threading
from pysc2.agents import base_agent
from pysc2.env import sc2_env
from pysc2.lib import actions, features, units
from absl import app
import random

from absl import flags

#game setup
FLAGS = flags.FLAGS #for passing arguments
FLAGS([__file__])

steps = 400 # = 4 Episodes
step_mul = 1 #no frame skipping = realtime

#I think these are for the updated version of pysc2
from pysc2.agents import base_agent
from pysc2.lib import actions
from pysc2.lib import features

from pysc2.env import run_loop
from pysc2.env import sc2_env

import sc2gym
#from examples.base_example import BaseExample


_PLAYER_SELF = features.PlayerRelative.SELF
_PLAYER_NEUTRAL = features.PlayerRelative.NEUTRAL  # beacon/minerals
_PLAYER_ENEMY = features.PlayerRelative.ENEMY

FUNCTIONS = actions.FUNCTIONS
_NO_OP = 0
_ENV_NAME = "SC2MoveToBeacon-v1"

last_run_passed = False
num_consecutive_passes = 0
is_paused = False
episode_num = 1

running = False


############### Globals ######################

#----------------- SOAR Stuff --------------------------

class CliThread(threading.Thread): #Client thread for human intervention

    def __init__(self, q_main_thread):
        self.queue_main = q_main_thread
        threading.Thread.__init__(self)

    def run(self):
        cmd = "None"
        while cmd not in ("exit", "quit"):
            cmd = input("CMC> ")
            self.queue_main.put(cmd)

def create_kernel():
    kernel = sml.Kernel.CreateKernelInCurrentThread()
    if not kernel or kernel.HadError():
        print("Error creating kernel: " + kernel.GetLastErrorDescription())
        exit(1)
    return kernel

def create_agent(kernel, name):
    agent = kernel.CreateAgent("agent")
    if not agent:
        print("Error creating agent: " + kernel.GetLastErrorDescription())
        exit(1)
    return agent

def parse_output_commands(agent, structure):
    commands = {}
    mapping = {}
    for cmd in range(0, agent.GetNumberCommands()):
        error = False
        command = agent.GetCommand(cmd)
        cmd_name = command.GetCommandName()
        if cmd_name in structure:
            parameters = {}
            for param_name in structure[cmd_name]:
                param_value = command.GetParameterValue(param_name)
                if param_value:
                    parameters[param_name] = param_value
            if not error:
                commands[cmd_name] = parameters
                mapping[cmd_name] = command
        else:
            error = True
        if error:
            command.AddStatusError()
    return commands, mapping

# callback registry
def register_print_callback(kernel, agent, function, user_data=None):
    agent.RegisterForPrintEvent(sml.smlEVENT_PRINT, function, user_data)


def get_move_command(agent):

    move_cmd = [-1, -1]

    if agent.Commands():

        error = False
        command = agent.GetCommand(0)
        cmd_name = command.GetCommandName()

        param_value_x = command.GetParameterValue('valx')
        param_value_y = command.GetParameterValue('valy')

        print("Soar agent command: " + str(cmd_name))
        print("Soar agent values: " + str(param_value_x)+" "+str(param_value_y))

        move_cmd = [int(param_value_x), int(param_value_y)]

    return move_cmd


def callback_print_message(mid, user_data, agent, message):
    print(message.strip())

#TODO: This should be automatically generated in MTL based on environment definition
def create_input_wmes(agent):

    gym_id = agent.GetInputLink().CreateIdWME('gym')

    #list of entities and values that we care about, for SC2 Beacon it is the location.
    pos_x = gym_id.CreateIntWME('x', 0)
    pos_y = gym_id.CreateIntWME('y', 0)

    agent.RunSelf(1)

    return (pos_x, pos_y)

def update_input_wmes(obs):
    global input_wmes
    (pos_x, pos_y) = input_wmes

    #TODO: this could be generated by MTL

    ## Observation matrix is pre-processed by sc2gym lib

    neutral_y, neutral_x = (obs[0] == _PLAYER_NEUTRAL).nonzero()

    target_x = int(neutral_x.mean())
    target_y = int(neutral_y.mean())

    pos_x.Update(target_x)
    pos_y.Update(target_y)

# BaseExample for SC2 Gym Environment Loop

class BaseExample(object):
    def __init__(self, env_name, visualize=False, step_mul=None, random_seed=None) -> None:
        super().__init__()
        self.env_name = env_name
        self.visualize = visualize
        self.step_mul = step_mul
        self.random_seed = random_seed

    def run(self, num_episodes=1):
        env = gym.make(self.env_name)
        env.settings['visualize'] = self.visualize
        env.settings['step_mul'] = self.step_mul
        env.settings['random_seed'] = self.random_seed
        env.settings['players'] = [sc2_env.Agent(sc2_env.Race.terran)]

        episode_rewards = np.zeros((num_episodes,), dtype=np.int32)
        episodes_done = 0
        for ix in range(num_episodes):

            obs = env.reset()
            update_input_wmes(obs)
            agent.RunSelf(1)

            done = False
            while not done:
                action = self.get_action(env, obs)
                obs, reward, done, _ = env.step(action)
                #update_model_action(obs)
                update_input_wmes(obs)
                agent.RunSelf(1)

            # stop if the environment was interrupted for any reason
            if obs is None:
                break

            episodes_done += 1
            episode_rewards[ix] = env.episode_reward

        env.close()

        return episode_rewards[:episodes_done]

    def get_action(self, env, obs):
        raise NotImplementedError('Inherited classes must override get_action() method')


class MoveToBeacon2d(BaseExample):
    def __init__(self, visualize=True, step_mul=None, random_seed=None) -> None:
        super().__init__(_ENV_NAME, visualize, step_mul, random_seed)

    def get_action(self, env, obs):

        #print("Observation: "+obs[0])

        # action logic...

        temp_target = get_move_command(agent)

        if temp_target is not None:
            temp_target = str(temp_target)
        else:
            temp_target = "None"

        print("Temp Target: "+temp_target)

        neutral_y, neutral_x = (obs[0] == _PLAYER_NEUTRAL).nonzero()
        if not neutral_y.any():
            raise Exception('Beacon not found!')
        target = [int(neutral_x.mean()), int(neutral_y.mean())]
        #target = np.ravel_multi_index(target, obs.shape[1:])

        print("Target: "+str(target))

        return target

#============================================
#=================  MAIN  ===================
#============================================

if __name__ == "__main__":

    # Create the user input thread and queue for return commands
    queue_user_cmds = queue.Queue()
    user_cmd_thread = CliThread(queue_user_cmds)
    user_cmd_thread.start()

    # Create the Soar agent
    kernel = create_kernel()
    agent = create_agent(kernel, "agent")
    register_print_callback(kernel, agent, callback_print_message, None)

    input_wmes = create_input_wmes(agent)

    print(agent.ExecuteCommandLine("source starcraft2.soar"))

    ## example from sc2gameenv

    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('--visualize', type=bool, default=True,
                        help='show the pysc2 visualizer')
    parser.add_argument('--num-episodes', type=int, default=10,
                        help='number of episodes to run')
    parser.add_argument('--step-mul', type=int, default=None,
                        help='number of game steps to take per turn')
    parser.add_argument('--random-seed', type=int, default=None,
                        help='the random seed to pass to the game environment')
    args = parser.parse_args()

    example = MoveToBeacon2d(args.visualize, args.step_mul, args.random_seed)
    rewards = example.run(args.num_episodes)

    if rewards:
        print('Total reward: {}'.format(rewards.sum()))
        print('Average reward: {} +/- {}'.format(rewards.mean(), rewards.std()))
        print('Minimum reward: {}'.format(rewards.min()))
        print('Maximum reward: {}'.format(rewards.max()))

    ## clean up

    #gym_env.close()
    # close the SC2 Environment


    kernel.DestroyAgent(agent)
    kernel.Shutdown()
    del kernel